/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
	"fmt"
)

// checks if the SFULocationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SFULocationResponse{}

// SFULocationResponse struct for SFULocationResponse
type SFULocationResponse struct {
	Coordinates Coordinates `json:"coordinates"`
	Datacenter string `json:"datacenter"`
	Id string `json:"id"`
	Location Location `json:"location"`
	AdditionalProperties map[string]interface{}
}

type _SFULocationResponse SFULocationResponse

// NewSFULocationResponse instantiates a new SFULocationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSFULocationResponse(coordinates Coordinates, datacenter string, id string, location Location) *SFULocationResponse {
	this := SFULocationResponse{}
	this.Coordinates = coordinates
	this.Datacenter = datacenter
	this.Id = id
	this.Location = location
	return &this
}

// NewSFULocationResponseWithDefaults instantiates a new SFULocationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSFULocationResponseWithDefaults() *SFULocationResponse {
	this := SFULocationResponse{}
	return &this
}

// GetCoordinates returns the Coordinates field value
func (o *SFULocationResponse) GetCoordinates() Coordinates {
	if o == nil {
		var ret Coordinates
		return ret
	}

	return o.Coordinates
}

// GetCoordinatesOk returns a tuple with the Coordinates field value
// and a boolean to check if the value has been set.
func (o *SFULocationResponse) GetCoordinatesOk() (*Coordinates, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Coordinates, true
}

// SetCoordinates sets field value
func (o *SFULocationResponse) SetCoordinates(v Coordinates) {
	o.Coordinates = v
}

// GetDatacenter returns the Datacenter field value
func (o *SFULocationResponse) GetDatacenter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Datacenter
}

// GetDatacenterOk returns a tuple with the Datacenter field value
// and a boolean to check if the value has been set.
func (o *SFULocationResponse) GetDatacenterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Datacenter, true
}

// SetDatacenter sets field value
func (o *SFULocationResponse) SetDatacenter(v string) {
	o.Datacenter = v
}

// GetId returns the Id field value
func (o *SFULocationResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SFULocationResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SFULocationResponse) SetId(v string) {
	o.Id = v
}

// GetLocation returns the Location field value
func (o *SFULocationResponse) GetLocation() Location {
	if o == nil {
		var ret Location
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *SFULocationResponse) GetLocationOk() (*Location, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *SFULocationResponse) SetLocation(v Location) {
	o.Location = v
}

func (o SFULocationResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SFULocationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["coordinates"] = o.Coordinates
	toSerialize["datacenter"] = o.Datacenter
	toSerialize["id"] = o.Id
	toSerialize["location"] = o.Location

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SFULocationResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"coordinates",
		"datacenter",
		"id",
		"location",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSFULocationResponse := _SFULocationResponse{}

	err = json.Unmarshal(data, &varSFULocationResponse)

	if err != nil {
		return err
	}

	*o = SFULocationResponse(varSFULocationResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "coordinates")
		delete(additionalProperties, "datacenter")
		delete(additionalProperties, "id")
		delete(additionalProperties, "location")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSFULocationResponse struct {
	value *SFULocationResponse
	isSet bool
}

func (v NullableSFULocationResponse) Get() *SFULocationResponse {
	return v.value
}

func (v *NullableSFULocationResponse) Set(val *SFULocationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSFULocationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSFULocationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSFULocationResponse(val *SFULocationResponse) *NullableSFULocationResponse {
	return &NullableSFULocationResponse{value: val, isSet: true}
}

func (v NullableSFULocationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSFULocationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


