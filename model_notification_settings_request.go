/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
)

// checks if the NotificationSettingsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationSettingsRequest{}

// NotificationSettingsRequest struct for NotificationSettingsRequest
type NotificationSettingsRequest struct {
	CallLiveStarted *EventNotificationSettingsRequest `json:"call_live_started,omitempty"`
	CallNotification *EventNotificationSettingsRequest `json:"call_notification,omitempty"`
	CallRing *EventNotificationSettingsRequest `json:"call_ring,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	SessionStarted *EventNotificationSettingsRequest `json:"session_started,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NotificationSettingsRequest NotificationSettingsRequest

// NewNotificationSettingsRequest instantiates a new NotificationSettingsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationSettingsRequest() *NotificationSettingsRequest {
	this := NotificationSettingsRequest{}
	return &this
}

// NewNotificationSettingsRequestWithDefaults instantiates a new NotificationSettingsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationSettingsRequestWithDefaults() *NotificationSettingsRequest {
	this := NotificationSettingsRequest{}
	return &this
}

// GetCallLiveStarted returns the CallLiveStarted field value if set, zero value otherwise.
func (o *NotificationSettingsRequest) GetCallLiveStarted() EventNotificationSettingsRequest {
	if o == nil || IsNil(o.CallLiveStarted) {
		var ret EventNotificationSettingsRequest
		return ret
	}
	return *o.CallLiveStarted
}

// GetCallLiveStartedOk returns a tuple with the CallLiveStarted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSettingsRequest) GetCallLiveStartedOk() (*EventNotificationSettingsRequest, bool) {
	if o == nil || IsNil(o.CallLiveStarted) {
		return nil, false
	}
	return o.CallLiveStarted, true
}

// HasCallLiveStarted returns a boolean if a field has been set.
func (o *NotificationSettingsRequest) HasCallLiveStarted() bool {
	if o != nil && !IsNil(o.CallLiveStarted) {
		return true
	}

	return false
}

// SetCallLiveStarted gets a reference to the given EventNotificationSettingsRequest and assigns it to the CallLiveStarted field.
func (o *NotificationSettingsRequest) SetCallLiveStarted(v EventNotificationSettingsRequest) {
	o.CallLiveStarted = &v
}

// GetCallNotification returns the CallNotification field value if set, zero value otherwise.
func (o *NotificationSettingsRequest) GetCallNotification() EventNotificationSettingsRequest {
	if o == nil || IsNil(o.CallNotification) {
		var ret EventNotificationSettingsRequest
		return ret
	}
	return *o.CallNotification
}

// GetCallNotificationOk returns a tuple with the CallNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSettingsRequest) GetCallNotificationOk() (*EventNotificationSettingsRequest, bool) {
	if o == nil || IsNil(o.CallNotification) {
		return nil, false
	}
	return o.CallNotification, true
}

// HasCallNotification returns a boolean if a field has been set.
func (o *NotificationSettingsRequest) HasCallNotification() bool {
	if o != nil && !IsNil(o.CallNotification) {
		return true
	}

	return false
}

// SetCallNotification gets a reference to the given EventNotificationSettingsRequest and assigns it to the CallNotification field.
func (o *NotificationSettingsRequest) SetCallNotification(v EventNotificationSettingsRequest) {
	o.CallNotification = &v
}

// GetCallRing returns the CallRing field value if set, zero value otherwise.
func (o *NotificationSettingsRequest) GetCallRing() EventNotificationSettingsRequest {
	if o == nil || IsNil(o.CallRing) {
		var ret EventNotificationSettingsRequest
		return ret
	}
	return *o.CallRing
}

// GetCallRingOk returns a tuple with the CallRing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSettingsRequest) GetCallRingOk() (*EventNotificationSettingsRequest, bool) {
	if o == nil || IsNil(o.CallRing) {
		return nil, false
	}
	return o.CallRing, true
}

// HasCallRing returns a boolean if a field has been set.
func (o *NotificationSettingsRequest) HasCallRing() bool {
	if o != nil && !IsNil(o.CallRing) {
		return true
	}

	return false
}

// SetCallRing gets a reference to the given EventNotificationSettingsRequest and assigns it to the CallRing field.
func (o *NotificationSettingsRequest) SetCallRing(v EventNotificationSettingsRequest) {
	o.CallRing = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *NotificationSettingsRequest) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSettingsRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *NotificationSettingsRequest) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *NotificationSettingsRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetSessionStarted returns the SessionStarted field value if set, zero value otherwise.
func (o *NotificationSettingsRequest) GetSessionStarted() EventNotificationSettingsRequest {
	if o == nil || IsNil(o.SessionStarted) {
		var ret EventNotificationSettingsRequest
		return ret
	}
	return *o.SessionStarted
}

// GetSessionStartedOk returns a tuple with the SessionStarted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSettingsRequest) GetSessionStartedOk() (*EventNotificationSettingsRequest, bool) {
	if o == nil || IsNil(o.SessionStarted) {
		return nil, false
	}
	return o.SessionStarted, true
}

// HasSessionStarted returns a boolean if a field has been set.
func (o *NotificationSettingsRequest) HasSessionStarted() bool {
	if o != nil && !IsNil(o.SessionStarted) {
		return true
	}

	return false
}

// SetSessionStarted gets a reference to the given EventNotificationSettingsRequest and assigns it to the SessionStarted field.
func (o *NotificationSettingsRequest) SetSessionStarted(v EventNotificationSettingsRequest) {
	o.SessionStarted = &v
}

func (o NotificationSettingsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationSettingsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CallLiveStarted) {
		toSerialize["call_live_started"] = o.CallLiveStarted
	}
	if !IsNil(o.CallNotification) {
		toSerialize["call_notification"] = o.CallNotification
	}
	if !IsNil(o.CallRing) {
		toSerialize["call_ring"] = o.CallRing
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.SessionStarted) {
		toSerialize["session_started"] = o.SessionStarted
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NotificationSettingsRequest) UnmarshalJSON(data []byte) (err error) {
	varNotificationSettingsRequest := _NotificationSettingsRequest{}

	err = json.Unmarshal(data, &varNotificationSettingsRequest)

	if err != nil {
		return err
	}

	*o = NotificationSettingsRequest(varNotificationSettingsRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "call_live_started")
		delete(additionalProperties, "call_notification")
		delete(additionalProperties, "call_ring")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "session_started")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNotificationSettingsRequest struct {
	value *NotificationSettingsRequest
	isSet bool
}

func (v NullableNotificationSettingsRequest) Get() *NotificationSettingsRequest {
	return v.value
}

func (v *NullableNotificationSettingsRequest) Set(val *NotificationSettingsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationSettingsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationSettingsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationSettingsRequest(val *NotificationSettingsRequest) *NullableNotificationSettingsRequest {
	return &NullableNotificationSettingsRequest{value: val, isSet: true}
}

func (v NullableNotificationSettingsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationSettingsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


