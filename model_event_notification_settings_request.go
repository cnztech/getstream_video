/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
)

// checks if the EventNotificationSettingsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventNotificationSettingsRequest{}

// EventNotificationSettingsRequest struct for EventNotificationSettingsRequest
type EventNotificationSettingsRequest struct {
	Apns *APNSRequest `json:"apns,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EventNotificationSettingsRequest EventNotificationSettingsRequest

// NewEventNotificationSettingsRequest instantiates a new EventNotificationSettingsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventNotificationSettingsRequest() *EventNotificationSettingsRequest {
	this := EventNotificationSettingsRequest{}
	return &this
}

// NewEventNotificationSettingsRequestWithDefaults instantiates a new EventNotificationSettingsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventNotificationSettingsRequestWithDefaults() *EventNotificationSettingsRequest {
	this := EventNotificationSettingsRequest{}
	return &this
}

// GetApns returns the Apns field value if set, zero value otherwise.
func (o *EventNotificationSettingsRequest) GetApns() APNSRequest {
	if o == nil || IsNil(o.Apns) {
		var ret APNSRequest
		return ret
	}
	return *o.Apns
}

// GetApnsOk returns a tuple with the Apns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotificationSettingsRequest) GetApnsOk() (*APNSRequest, bool) {
	if o == nil || IsNil(o.Apns) {
		return nil, false
	}
	return o.Apns, true
}

// HasApns returns a boolean if a field has been set.
func (o *EventNotificationSettingsRequest) HasApns() bool {
	if o != nil && !IsNil(o.Apns) {
		return true
	}

	return false
}

// SetApns gets a reference to the given APNSRequest and assigns it to the Apns field.
func (o *EventNotificationSettingsRequest) SetApns(v APNSRequest) {
	o.Apns = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *EventNotificationSettingsRequest) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotificationSettingsRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *EventNotificationSettingsRequest) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *EventNotificationSettingsRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o EventNotificationSettingsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventNotificationSettingsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Apns) {
		toSerialize["apns"] = o.Apns
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EventNotificationSettingsRequest) UnmarshalJSON(data []byte) (err error) {
	varEventNotificationSettingsRequest := _EventNotificationSettingsRequest{}

	err = json.Unmarshal(data, &varEventNotificationSettingsRequest)

	if err != nil {
		return err
	}

	*o = EventNotificationSettingsRequest(varEventNotificationSettingsRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "apns")
		delete(additionalProperties, "enabled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEventNotificationSettingsRequest struct {
	value *EventNotificationSettingsRequest
	isSet bool
}

func (v NullableEventNotificationSettingsRequest) Get() *EventNotificationSettingsRequest {
	return v.value
}

func (v *NullableEventNotificationSettingsRequest) Set(val *EventNotificationSettingsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEventNotificationSettingsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEventNotificationSettingsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventNotificationSettingsRequest(val *EventNotificationSettingsRequest) *NullableEventNotificationSettingsRequest {
	return &NullableEventNotificationSettingsRequest{value: val, isSet: true}
}

func (v NullableEventNotificationSettingsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventNotificationSettingsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


