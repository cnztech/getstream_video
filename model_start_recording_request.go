/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
)

// checks if the StartRecordingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StartRecordingRequest{}

// StartRecordingRequest struct for StartRecordingRequest
type StartRecordingRequest struct {
	RecordingExternalStorage *string `json:"recording_external_storage,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StartRecordingRequest StartRecordingRequest

// NewStartRecordingRequest instantiates a new StartRecordingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStartRecordingRequest() *StartRecordingRequest {
	this := StartRecordingRequest{}
	return &this
}

// NewStartRecordingRequestWithDefaults instantiates a new StartRecordingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStartRecordingRequestWithDefaults() *StartRecordingRequest {
	this := StartRecordingRequest{}
	return &this
}

// GetRecordingExternalStorage returns the RecordingExternalStorage field value if set, zero value otherwise.
func (o *StartRecordingRequest) GetRecordingExternalStorage() string {
	if o == nil || IsNil(o.RecordingExternalStorage) {
		var ret string
		return ret
	}
	return *o.RecordingExternalStorage
}

// GetRecordingExternalStorageOk returns a tuple with the RecordingExternalStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartRecordingRequest) GetRecordingExternalStorageOk() (*string, bool) {
	if o == nil || IsNil(o.RecordingExternalStorage) {
		return nil, false
	}
	return o.RecordingExternalStorage, true
}

// HasRecordingExternalStorage returns a boolean if a field has been set.
func (o *StartRecordingRequest) HasRecordingExternalStorage() bool {
	if o != nil && !IsNil(o.RecordingExternalStorage) {
		return true
	}

	return false
}

// SetRecordingExternalStorage gets a reference to the given string and assigns it to the RecordingExternalStorage field.
func (o *StartRecordingRequest) SetRecordingExternalStorage(v string) {
	o.RecordingExternalStorage = &v
}

func (o StartRecordingRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StartRecordingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RecordingExternalStorage) {
		toSerialize["recording_external_storage"] = o.RecordingExternalStorage
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StartRecordingRequest) UnmarshalJSON(data []byte) (err error) {
	varStartRecordingRequest := _StartRecordingRequest{}

	err = json.Unmarshal(data, &varStartRecordingRequest)

	if err != nil {
		return err
	}

	*o = StartRecordingRequest(varStartRecordingRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "recording_external_storage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStartRecordingRequest struct {
	value *StartRecordingRequest
	isSet bool
}

func (v NullableStartRecordingRequest) Get() *StartRecordingRequest {
	return v.value
}

func (v *NullableStartRecordingRequest) Set(val *StartRecordingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableStartRecordingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableStartRecordingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStartRecordingRequest(val *StartRecordingRequest) *NullableStartRecordingRequest {
	return &NullableStartRecordingRequest{value: val, isSet: true}
}

func (v NullableStartRecordingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStartRecordingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


