/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
	"fmt"
)

// checks if the S3Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3Request{}

// S3Request struct for S3Request
type S3Request struct {
	S3ApiKey *string `json:"s3_api_key,omitempty"`
	S3Region string `json:"s3_region"`
	S3Secret *string `json:"s3_secret,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _S3Request S3Request

// NewS3Request instantiates a new S3Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3Request(s3Region string) *S3Request {
	this := S3Request{}
	this.S3Region = s3Region
	return &this
}

// NewS3RequestWithDefaults instantiates a new S3Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3RequestWithDefaults() *S3Request {
	this := S3Request{}
	return &this
}

// GetS3ApiKey returns the S3ApiKey field value if set, zero value otherwise.
func (o *S3Request) GetS3ApiKey() string {
	if o == nil || IsNil(o.S3ApiKey) {
		var ret string
		return ret
	}
	return *o.S3ApiKey
}

// GetS3ApiKeyOk returns a tuple with the S3ApiKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Request) GetS3ApiKeyOk() (*string, bool) {
	if o == nil || IsNil(o.S3ApiKey) {
		return nil, false
	}
	return o.S3ApiKey, true
}

// HasS3ApiKey returns a boolean if a field has been set.
func (o *S3Request) HasS3ApiKey() bool {
	if o != nil && !IsNil(o.S3ApiKey) {
		return true
	}

	return false
}

// SetS3ApiKey gets a reference to the given string and assigns it to the S3ApiKey field.
func (o *S3Request) SetS3ApiKey(v string) {
	o.S3ApiKey = &v
}

// GetS3Region returns the S3Region field value
func (o *S3Request) GetS3Region() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.S3Region
}

// GetS3RegionOk returns a tuple with the S3Region field value
// and a boolean to check if the value has been set.
func (o *S3Request) GetS3RegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.S3Region, true
}

// SetS3Region sets field value
func (o *S3Request) SetS3Region(v string) {
	o.S3Region = v
}

// GetS3Secret returns the S3Secret field value if set, zero value otherwise.
func (o *S3Request) GetS3Secret() string {
	if o == nil || IsNil(o.S3Secret) {
		var ret string
		return ret
	}
	return *o.S3Secret
}

// GetS3SecretOk returns a tuple with the S3Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Request) GetS3SecretOk() (*string, bool) {
	if o == nil || IsNil(o.S3Secret) {
		return nil, false
	}
	return o.S3Secret, true
}

// HasS3Secret returns a boolean if a field has been set.
func (o *S3Request) HasS3Secret() bool {
	if o != nil && !IsNil(o.S3Secret) {
		return true
	}

	return false
}

// SetS3Secret gets a reference to the given string and assigns it to the S3Secret field.
func (o *S3Request) SetS3Secret(v string) {
	o.S3Secret = &v
}

func (o S3Request) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.S3ApiKey) {
		toSerialize["s3_api_key"] = o.S3ApiKey
	}
	toSerialize["s3_region"] = o.S3Region
	if !IsNil(o.S3Secret) {
		toSerialize["s3_secret"] = o.S3Secret
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *S3Request) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"s3_region",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varS3Request := _S3Request{}

	err = json.Unmarshal(data, &varS3Request)

	if err != nil {
		return err
	}

	*o = S3Request(varS3Request)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "s3_api_key")
		delete(additionalProperties, "s3_region")
		delete(additionalProperties, "s3_secret")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableS3Request struct {
	value *S3Request
	isSet bool
}

func (v NullableS3Request) Get() *S3Request {
	return v.value
}

func (v *NullableS3Request) Set(val *S3Request) {
	v.value = val
	v.isSet = true
}

func (v NullableS3Request) IsSet() bool {
	return v.isSet
}

func (v *NullableS3Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3Request(val *S3Request) *NullableS3Request {
	return &NullableS3Request{value: val, isSet: true}
}

func (v NullableS3Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


