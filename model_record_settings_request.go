/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
	"fmt"
)

// checks if the RecordSettingsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordSettingsRequest{}

// RecordSettingsRequest struct for RecordSettingsRequest
type RecordSettingsRequest struct {
	AudioOnly *bool `json:"audio_only,omitempty"`
	Layout *LayoutSettingsRequest `json:"layout,omitempty"`
	Mode string `json:"mode"`
	Quality *string `json:"quality,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RecordSettingsRequest RecordSettingsRequest

// NewRecordSettingsRequest instantiates a new RecordSettingsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordSettingsRequest(mode string) *RecordSettingsRequest {
	this := RecordSettingsRequest{}
	this.Mode = mode
	return &this
}

// NewRecordSettingsRequestWithDefaults instantiates a new RecordSettingsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordSettingsRequestWithDefaults() *RecordSettingsRequest {
	this := RecordSettingsRequest{}
	return &this
}

// GetAudioOnly returns the AudioOnly field value if set, zero value otherwise.
func (o *RecordSettingsRequest) GetAudioOnly() bool {
	if o == nil || IsNil(o.AudioOnly) {
		var ret bool
		return ret
	}
	return *o.AudioOnly
}

// GetAudioOnlyOk returns a tuple with the AudioOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordSettingsRequest) GetAudioOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.AudioOnly) {
		return nil, false
	}
	return o.AudioOnly, true
}

// HasAudioOnly returns a boolean if a field has been set.
func (o *RecordSettingsRequest) HasAudioOnly() bool {
	if o != nil && !IsNil(o.AudioOnly) {
		return true
	}

	return false
}

// SetAudioOnly gets a reference to the given bool and assigns it to the AudioOnly field.
func (o *RecordSettingsRequest) SetAudioOnly(v bool) {
	o.AudioOnly = &v
}

// GetLayout returns the Layout field value if set, zero value otherwise.
func (o *RecordSettingsRequest) GetLayout() LayoutSettingsRequest {
	if o == nil || IsNil(o.Layout) {
		var ret LayoutSettingsRequest
		return ret
	}
	return *o.Layout
}

// GetLayoutOk returns a tuple with the Layout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordSettingsRequest) GetLayoutOk() (*LayoutSettingsRequest, bool) {
	if o == nil || IsNil(o.Layout) {
		return nil, false
	}
	return o.Layout, true
}

// HasLayout returns a boolean if a field has been set.
func (o *RecordSettingsRequest) HasLayout() bool {
	if o != nil && !IsNil(o.Layout) {
		return true
	}

	return false
}

// SetLayout gets a reference to the given LayoutSettingsRequest and assigns it to the Layout field.
func (o *RecordSettingsRequest) SetLayout(v LayoutSettingsRequest) {
	o.Layout = &v
}

// GetMode returns the Mode field value
func (o *RecordSettingsRequest) GetMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *RecordSettingsRequest) GetModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *RecordSettingsRequest) SetMode(v string) {
	o.Mode = v
}

// GetQuality returns the Quality field value if set, zero value otherwise.
func (o *RecordSettingsRequest) GetQuality() string {
	if o == nil || IsNil(o.Quality) {
		var ret string
		return ret
	}
	return *o.Quality
}

// GetQualityOk returns a tuple with the Quality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordSettingsRequest) GetQualityOk() (*string, bool) {
	if o == nil || IsNil(o.Quality) {
		return nil, false
	}
	return o.Quality, true
}

// HasQuality returns a boolean if a field has been set.
func (o *RecordSettingsRequest) HasQuality() bool {
	if o != nil && !IsNil(o.Quality) {
		return true
	}

	return false
}

// SetQuality gets a reference to the given string and assigns it to the Quality field.
func (o *RecordSettingsRequest) SetQuality(v string) {
	o.Quality = &v
}

func (o RecordSettingsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordSettingsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AudioOnly) {
		toSerialize["audio_only"] = o.AudioOnly
	}
	if !IsNil(o.Layout) {
		toSerialize["layout"] = o.Layout
	}
	toSerialize["mode"] = o.Mode
	if !IsNil(o.Quality) {
		toSerialize["quality"] = o.Quality
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RecordSettingsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecordSettingsRequest := _RecordSettingsRequest{}

	err = json.Unmarshal(data, &varRecordSettingsRequest)

	if err != nil {
		return err
	}

	*o = RecordSettingsRequest(varRecordSettingsRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "audio_only")
		delete(additionalProperties, "layout")
		delete(additionalProperties, "mode")
		delete(additionalProperties, "quality")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRecordSettingsRequest struct {
	value *RecordSettingsRequest
	isSet bool
}

func (v NullableRecordSettingsRequest) Get() *RecordSettingsRequest {
	return v.value
}

func (v *NullableRecordSettingsRequest) Set(val *RecordSettingsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordSettingsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordSettingsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordSettingsRequest(val *RecordSettingsRequest) *NullableRecordSettingsRequest {
	return &NullableRecordSettingsRequest{value: val, isSet: true}
}

func (v NullableRecordSettingsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordSettingsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


