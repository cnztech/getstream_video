/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
	"fmt"
)

// checks if the UserInfoResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserInfoResponse{}

// UserInfoResponse struct for UserInfoResponse
type UserInfoResponse struct {
	Custom map[string]interface{} `json:"custom"`
	Image string `json:"image"`
	Name string `json:"name"`
	AdditionalProperties map[string]interface{}
}

type _UserInfoResponse UserInfoResponse

// NewUserInfoResponse instantiates a new UserInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserInfoResponse(custom map[string]interface{}, image string, name string) *UserInfoResponse {
	this := UserInfoResponse{}
	this.Custom = custom
	this.Image = image
	this.Name = name
	return &this
}

// NewUserInfoResponseWithDefaults instantiates a new UserInfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserInfoResponseWithDefaults() *UserInfoResponse {
	this := UserInfoResponse{}
	return &this
}

// GetCustom returns the Custom field value
func (o *UserInfoResponse) GetCustom() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Custom
}

// GetCustomOk returns a tuple with the Custom field value
// and a boolean to check if the value has been set.
func (o *UserInfoResponse) GetCustomOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Custom, true
}

// SetCustom sets field value
func (o *UserInfoResponse) SetCustom(v map[string]interface{}) {
	o.Custom = v
}

// GetImage returns the Image field value
func (o *UserInfoResponse) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *UserInfoResponse) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *UserInfoResponse) SetImage(v string) {
	o.Image = v
}

// GetName returns the Name field value
func (o *UserInfoResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UserInfoResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UserInfoResponse) SetName(v string) {
	o.Name = v
}

func (o UserInfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserInfoResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["custom"] = o.Custom
	toSerialize["image"] = o.Image
	toSerialize["name"] = o.Name

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserInfoResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"custom",
		"image",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserInfoResponse := _UserInfoResponse{}

	err = json.Unmarshal(data, &varUserInfoResponse)

	if err != nil {
		return err
	}

	*o = UserInfoResponse(varUserInfoResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "custom")
		delete(additionalProperties, "image")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserInfoResponse struct {
	value *UserInfoResponse
	isSet bool
}

func (v NullableUserInfoResponse) Get() *UserInfoResponse {
	return v.value
}

func (v *NullableUserInfoResponse) Set(val *UserInfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserInfoResponse(val *UserInfoResponse) *NullableUserInfoResponse {
	return &NullableUserInfoResponse{value: val, isSet: true}
}

func (v NullableUserInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


