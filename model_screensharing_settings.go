/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
	"fmt"
)

// checks if the ScreensharingSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScreensharingSettings{}

// ScreensharingSettings struct for ScreensharingSettings
type ScreensharingSettings struct {
	AccessRequestEnabled bool `json:"access_request_enabled"`
	Enabled bool `json:"enabled"`
	AdditionalProperties map[string]interface{}
}

type _ScreensharingSettings ScreensharingSettings

// NewScreensharingSettings instantiates a new ScreensharingSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScreensharingSettings(accessRequestEnabled bool, enabled bool) *ScreensharingSettings {
	this := ScreensharingSettings{}
	this.AccessRequestEnabled = accessRequestEnabled
	this.Enabled = enabled
	return &this
}

// NewScreensharingSettingsWithDefaults instantiates a new ScreensharingSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScreensharingSettingsWithDefaults() *ScreensharingSettings {
	this := ScreensharingSettings{}
	return &this
}

// GetAccessRequestEnabled returns the AccessRequestEnabled field value
func (o *ScreensharingSettings) GetAccessRequestEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AccessRequestEnabled
}

// GetAccessRequestEnabledOk returns a tuple with the AccessRequestEnabled field value
// and a boolean to check if the value has been set.
func (o *ScreensharingSettings) GetAccessRequestEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessRequestEnabled, true
}

// SetAccessRequestEnabled sets field value
func (o *ScreensharingSettings) SetAccessRequestEnabled(v bool) {
	o.AccessRequestEnabled = v
}

// GetEnabled returns the Enabled field value
func (o *ScreensharingSettings) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ScreensharingSettings) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ScreensharingSettings) SetEnabled(v bool) {
	o.Enabled = v
}

func (o ScreensharingSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScreensharingSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["access_request_enabled"] = o.AccessRequestEnabled
	toSerialize["enabled"] = o.Enabled

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ScreensharingSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"access_request_enabled",
		"enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScreensharingSettings := _ScreensharingSettings{}

	err = json.Unmarshal(data, &varScreensharingSettings)

	if err != nil {
		return err
	}

	*o = ScreensharingSettings(varScreensharingSettings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "access_request_enabled")
		delete(additionalProperties, "enabled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableScreensharingSettings struct {
	value *ScreensharingSettings
	isSet bool
}

func (v NullableScreensharingSettings) Get() *ScreensharingSettings {
	return v.value
}

func (v *NullableScreensharingSettings) Set(val *ScreensharingSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableScreensharingSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableScreensharingSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScreensharingSettings(val *ScreensharingSettings) *NullableScreensharingSettings {
	return &NullableScreensharingSettings{value: val, isSet: true}
}

func (v NullableScreensharingSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScreensharingSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


