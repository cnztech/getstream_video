/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
	"fmt"
)

// checks if the RingSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RingSettings{}

// RingSettings struct for RingSettings
type RingSettings struct {
	AutoCancelTimeoutMs int32 `json:"auto_cancel_timeout_ms"`
	IncomingCallTimeoutMs int32 `json:"incoming_call_timeout_ms"`
	AdditionalProperties map[string]interface{}
}

type _RingSettings RingSettings

// NewRingSettings instantiates a new RingSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRingSettings(autoCancelTimeoutMs int32, incomingCallTimeoutMs int32) *RingSettings {
	this := RingSettings{}
	this.AutoCancelTimeoutMs = autoCancelTimeoutMs
	this.IncomingCallTimeoutMs = incomingCallTimeoutMs
	return &this
}

// NewRingSettingsWithDefaults instantiates a new RingSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRingSettingsWithDefaults() *RingSettings {
	this := RingSettings{}
	return &this
}

// GetAutoCancelTimeoutMs returns the AutoCancelTimeoutMs field value
func (o *RingSettings) GetAutoCancelTimeoutMs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AutoCancelTimeoutMs
}

// GetAutoCancelTimeoutMsOk returns a tuple with the AutoCancelTimeoutMs field value
// and a boolean to check if the value has been set.
func (o *RingSettings) GetAutoCancelTimeoutMsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AutoCancelTimeoutMs, true
}

// SetAutoCancelTimeoutMs sets field value
func (o *RingSettings) SetAutoCancelTimeoutMs(v int32) {
	o.AutoCancelTimeoutMs = v
}

// GetIncomingCallTimeoutMs returns the IncomingCallTimeoutMs field value
func (o *RingSettings) GetIncomingCallTimeoutMs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IncomingCallTimeoutMs
}

// GetIncomingCallTimeoutMsOk returns a tuple with the IncomingCallTimeoutMs field value
// and a boolean to check if the value has been set.
func (o *RingSettings) GetIncomingCallTimeoutMsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IncomingCallTimeoutMs, true
}

// SetIncomingCallTimeoutMs sets field value
func (o *RingSettings) SetIncomingCallTimeoutMs(v int32) {
	o.IncomingCallTimeoutMs = v
}

func (o RingSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RingSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["auto_cancel_timeout_ms"] = o.AutoCancelTimeoutMs
	toSerialize["incoming_call_timeout_ms"] = o.IncomingCallTimeoutMs

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RingSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"auto_cancel_timeout_ms",
		"incoming_call_timeout_ms",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRingSettings := _RingSettings{}

	err = json.Unmarshal(data, &varRingSettings)

	if err != nil {
		return err
	}

	*o = RingSettings(varRingSettings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "auto_cancel_timeout_ms")
		delete(additionalProperties, "incoming_call_timeout_ms")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRingSettings struct {
	value *RingSettings
	isSet bool
}

func (v NullableRingSettings) Get() *RingSettings {
	return v.value
}

func (v *NullableRingSettings) Set(val *RingSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableRingSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableRingSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRingSettings(val *RingSettings) *NullableRingSettings {
	return &NullableRingSettings{value: val, isSet: true}
}

func (v NullableRingSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRingSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


