/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
)

// checks if the TranscriptionSettingsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TranscriptionSettingsRequest{}

// TranscriptionSettingsRequest struct for TranscriptionSettingsRequest
type TranscriptionSettingsRequest struct {
	ClosedCaptionMode *string `json:"closed_caption_mode,omitempty"`
	Mode *string `json:"mode,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TranscriptionSettingsRequest TranscriptionSettingsRequest

// NewTranscriptionSettingsRequest instantiates a new TranscriptionSettingsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranscriptionSettingsRequest() *TranscriptionSettingsRequest {
	this := TranscriptionSettingsRequest{}
	return &this
}

// NewTranscriptionSettingsRequestWithDefaults instantiates a new TranscriptionSettingsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranscriptionSettingsRequestWithDefaults() *TranscriptionSettingsRequest {
	this := TranscriptionSettingsRequest{}
	return &this
}

// GetClosedCaptionMode returns the ClosedCaptionMode field value if set, zero value otherwise.
func (o *TranscriptionSettingsRequest) GetClosedCaptionMode() string {
	if o == nil || IsNil(o.ClosedCaptionMode) {
		var ret string
		return ret
	}
	return *o.ClosedCaptionMode
}

// GetClosedCaptionModeOk returns a tuple with the ClosedCaptionMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranscriptionSettingsRequest) GetClosedCaptionModeOk() (*string, bool) {
	if o == nil || IsNil(o.ClosedCaptionMode) {
		return nil, false
	}
	return o.ClosedCaptionMode, true
}

// HasClosedCaptionMode returns a boolean if a field has been set.
func (o *TranscriptionSettingsRequest) HasClosedCaptionMode() bool {
	if o != nil && !IsNil(o.ClosedCaptionMode) {
		return true
	}

	return false
}

// SetClosedCaptionMode gets a reference to the given string and assigns it to the ClosedCaptionMode field.
func (o *TranscriptionSettingsRequest) SetClosedCaptionMode(v string) {
	o.ClosedCaptionMode = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *TranscriptionSettingsRequest) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranscriptionSettingsRequest) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *TranscriptionSettingsRequest) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *TranscriptionSettingsRequest) SetMode(v string) {
	o.Mode = &v
}

func (o TranscriptionSettingsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TranscriptionSettingsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClosedCaptionMode) {
		toSerialize["closed_caption_mode"] = o.ClosedCaptionMode
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TranscriptionSettingsRequest) UnmarshalJSON(data []byte) (err error) {
	varTranscriptionSettingsRequest := _TranscriptionSettingsRequest{}

	err = json.Unmarshal(data, &varTranscriptionSettingsRequest)

	if err != nil {
		return err
	}

	*o = TranscriptionSettingsRequest(varTranscriptionSettingsRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "closed_caption_mode")
		delete(additionalProperties, "mode")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTranscriptionSettingsRequest struct {
	value *TranscriptionSettingsRequest
	isSet bool
}

func (v NullableTranscriptionSettingsRequest) Get() *TranscriptionSettingsRequest {
	return v.value
}

func (v *NullableTranscriptionSettingsRequest) Set(val *TranscriptionSettingsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTranscriptionSettingsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTranscriptionSettingsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranscriptionSettingsRequest(val *TranscriptionSettingsRequest) *NullableTranscriptionSettingsRequest {
	return &NullableTranscriptionSettingsRequest{value: val, isSet: true}
}

func (v NullableTranscriptionSettingsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranscriptionSettingsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


