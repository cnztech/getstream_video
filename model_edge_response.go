/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
	"fmt"
)

// checks if the EdgeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EdgeResponse{}

// EdgeResponse struct for EdgeResponse
type EdgeResponse struct {
	ContinentCode string `json:"continent_code"`
	CountryIsoCode string `json:"country_iso_code"`
	Green int32 `json:"green"`
	Id string `json:"id"`
	LatencyTestUrl string `json:"latency_test_url"`
	Latitude float32 `json:"latitude"`
	Longitude float32 `json:"longitude"`
	Red int32 `json:"red"`
	SubdivisionIsoCode string `json:"subdivision_iso_code"`
	Yellow int32 `json:"yellow"`
	AdditionalProperties map[string]interface{}
}

type _EdgeResponse EdgeResponse

// NewEdgeResponse instantiates a new EdgeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEdgeResponse(continentCode string, countryIsoCode string, green int32, id string, latencyTestUrl string, latitude float32, longitude float32, red int32, subdivisionIsoCode string, yellow int32) *EdgeResponse {
	this := EdgeResponse{}
	this.ContinentCode = continentCode
	this.CountryIsoCode = countryIsoCode
	this.Green = green
	this.Id = id
	this.LatencyTestUrl = latencyTestUrl
	this.Latitude = latitude
	this.Longitude = longitude
	this.Red = red
	this.SubdivisionIsoCode = subdivisionIsoCode
	this.Yellow = yellow
	return &this
}

// NewEdgeResponseWithDefaults instantiates a new EdgeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEdgeResponseWithDefaults() *EdgeResponse {
	this := EdgeResponse{}
	return &this
}

// GetContinentCode returns the ContinentCode field value
func (o *EdgeResponse) GetContinentCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContinentCode
}

// GetContinentCodeOk returns a tuple with the ContinentCode field value
// and a boolean to check if the value has been set.
func (o *EdgeResponse) GetContinentCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContinentCode, true
}

// SetContinentCode sets field value
func (o *EdgeResponse) SetContinentCode(v string) {
	o.ContinentCode = v
}

// GetCountryIsoCode returns the CountryIsoCode field value
func (o *EdgeResponse) GetCountryIsoCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CountryIsoCode
}

// GetCountryIsoCodeOk returns a tuple with the CountryIsoCode field value
// and a boolean to check if the value has been set.
func (o *EdgeResponse) GetCountryIsoCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountryIsoCode, true
}

// SetCountryIsoCode sets field value
func (o *EdgeResponse) SetCountryIsoCode(v string) {
	o.CountryIsoCode = v
}

// GetGreen returns the Green field value
func (o *EdgeResponse) GetGreen() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Green
}

// GetGreenOk returns a tuple with the Green field value
// and a boolean to check if the value has been set.
func (o *EdgeResponse) GetGreenOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Green, true
}

// SetGreen sets field value
func (o *EdgeResponse) SetGreen(v int32) {
	o.Green = v
}

// GetId returns the Id field value
func (o *EdgeResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EdgeResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EdgeResponse) SetId(v string) {
	o.Id = v
}

// GetLatencyTestUrl returns the LatencyTestUrl field value
func (o *EdgeResponse) GetLatencyTestUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LatencyTestUrl
}

// GetLatencyTestUrlOk returns a tuple with the LatencyTestUrl field value
// and a boolean to check if the value has been set.
func (o *EdgeResponse) GetLatencyTestUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LatencyTestUrl, true
}

// SetLatencyTestUrl sets field value
func (o *EdgeResponse) SetLatencyTestUrl(v string) {
	o.LatencyTestUrl = v
}

// GetLatitude returns the Latitude field value
func (o *EdgeResponse) GetLatitude() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value
// and a boolean to check if the value has been set.
func (o *EdgeResponse) GetLatitudeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Latitude, true
}

// SetLatitude sets field value
func (o *EdgeResponse) SetLatitude(v float32) {
	o.Latitude = v
}

// GetLongitude returns the Longitude field value
func (o *EdgeResponse) GetLongitude() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value
// and a boolean to check if the value has been set.
func (o *EdgeResponse) GetLongitudeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Longitude, true
}

// SetLongitude sets field value
func (o *EdgeResponse) SetLongitude(v float32) {
	o.Longitude = v
}

// GetRed returns the Red field value
func (o *EdgeResponse) GetRed() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Red
}

// GetRedOk returns a tuple with the Red field value
// and a boolean to check if the value has been set.
func (o *EdgeResponse) GetRedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Red, true
}

// SetRed sets field value
func (o *EdgeResponse) SetRed(v int32) {
	o.Red = v
}

// GetSubdivisionIsoCode returns the SubdivisionIsoCode field value
func (o *EdgeResponse) GetSubdivisionIsoCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubdivisionIsoCode
}

// GetSubdivisionIsoCodeOk returns a tuple with the SubdivisionIsoCode field value
// and a boolean to check if the value has been set.
func (o *EdgeResponse) GetSubdivisionIsoCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubdivisionIsoCode, true
}

// SetSubdivisionIsoCode sets field value
func (o *EdgeResponse) SetSubdivisionIsoCode(v string) {
	o.SubdivisionIsoCode = v
}

// GetYellow returns the Yellow field value
func (o *EdgeResponse) GetYellow() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Yellow
}

// GetYellowOk returns a tuple with the Yellow field value
// and a boolean to check if the value has been set.
func (o *EdgeResponse) GetYellowOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Yellow, true
}

// SetYellow sets field value
func (o *EdgeResponse) SetYellow(v int32) {
	o.Yellow = v
}

func (o EdgeResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EdgeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["continent_code"] = o.ContinentCode
	toSerialize["country_iso_code"] = o.CountryIsoCode
	toSerialize["green"] = o.Green
	toSerialize["id"] = o.Id
	toSerialize["latency_test_url"] = o.LatencyTestUrl
	toSerialize["latitude"] = o.Latitude
	toSerialize["longitude"] = o.Longitude
	toSerialize["red"] = o.Red
	toSerialize["subdivision_iso_code"] = o.SubdivisionIsoCode
	toSerialize["yellow"] = o.Yellow

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EdgeResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"continent_code",
		"country_iso_code",
		"green",
		"id",
		"latency_test_url",
		"latitude",
		"longitude",
		"red",
		"subdivision_iso_code",
		"yellow",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEdgeResponse := _EdgeResponse{}

	err = json.Unmarshal(data, &varEdgeResponse)

	if err != nil {
		return err
	}

	*o = EdgeResponse(varEdgeResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "continent_code")
		delete(additionalProperties, "country_iso_code")
		delete(additionalProperties, "green")
		delete(additionalProperties, "id")
		delete(additionalProperties, "latency_test_url")
		delete(additionalProperties, "latitude")
		delete(additionalProperties, "longitude")
		delete(additionalProperties, "red")
		delete(additionalProperties, "subdivision_iso_code")
		delete(additionalProperties, "yellow")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEdgeResponse struct {
	value *EdgeResponse
	isSet bool
}

func (v NullableEdgeResponse) Get() *EdgeResponse {
	return v.value
}

func (v *NullableEdgeResponse) Set(val *EdgeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEdgeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEdgeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdgeResponse(val *EdgeResponse) *NullableEdgeResponse {
	return &NullableEdgeResponse{value: val, isSet: true}
}

func (v NullableEdgeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdgeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


