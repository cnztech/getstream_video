/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
	"fmt"
)

// checks if the HLSSettingsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HLSSettingsResponse{}

// HLSSettingsResponse struct for HLSSettingsResponse
type HLSSettingsResponse struct {
	AutoOn bool `json:"auto_on"`
	Enabled bool `json:"enabled"`
	Layout LayoutSettings `json:"layout"`
	QualityTracks []string `json:"quality_tracks"`
	AdditionalProperties map[string]interface{}
}

type _HLSSettingsResponse HLSSettingsResponse

// NewHLSSettingsResponse instantiates a new HLSSettingsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHLSSettingsResponse(autoOn bool, enabled bool, layout LayoutSettings, qualityTracks []string) *HLSSettingsResponse {
	this := HLSSettingsResponse{}
	this.AutoOn = autoOn
	this.Enabled = enabled
	this.Layout = layout
	this.QualityTracks = qualityTracks
	return &this
}

// NewHLSSettingsResponseWithDefaults instantiates a new HLSSettingsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHLSSettingsResponseWithDefaults() *HLSSettingsResponse {
	this := HLSSettingsResponse{}
	return &this
}

// GetAutoOn returns the AutoOn field value
func (o *HLSSettingsResponse) GetAutoOn() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AutoOn
}

// GetAutoOnOk returns a tuple with the AutoOn field value
// and a boolean to check if the value has been set.
func (o *HLSSettingsResponse) GetAutoOnOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AutoOn, true
}

// SetAutoOn sets field value
func (o *HLSSettingsResponse) SetAutoOn(v bool) {
	o.AutoOn = v
}

// GetEnabled returns the Enabled field value
func (o *HLSSettingsResponse) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *HLSSettingsResponse) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *HLSSettingsResponse) SetEnabled(v bool) {
	o.Enabled = v
}

// GetLayout returns the Layout field value
func (o *HLSSettingsResponse) GetLayout() LayoutSettings {
	if o == nil {
		var ret LayoutSettings
		return ret
	}

	return o.Layout
}

// GetLayoutOk returns a tuple with the Layout field value
// and a boolean to check if the value has been set.
func (o *HLSSettingsResponse) GetLayoutOk() (*LayoutSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Layout, true
}

// SetLayout sets field value
func (o *HLSSettingsResponse) SetLayout(v LayoutSettings) {
	o.Layout = v
}

// GetQualityTracks returns the QualityTracks field value
func (o *HLSSettingsResponse) GetQualityTracks() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.QualityTracks
}

// GetQualityTracksOk returns a tuple with the QualityTracks field value
// and a boolean to check if the value has been set.
func (o *HLSSettingsResponse) GetQualityTracksOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.QualityTracks, true
}

// SetQualityTracks sets field value
func (o *HLSSettingsResponse) SetQualityTracks(v []string) {
	o.QualityTracks = v
}

func (o HLSSettingsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HLSSettingsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["auto_on"] = o.AutoOn
	toSerialize["enabled"] = o.Enabled
	toSerialize["layout"] = o.Layout
	toSerialize["quality_tracks"] = o.QualityTracks

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HLSSettingsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"auto_on",
		"enabled",
		"layout",
		"quality_tracks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHLSSettingsResponse := _HLSSettingsResponse{}

	err = json.Unmarshal(data, &varHLSSettingsResponse)

	if err != nil {
		return err
	}

	*o = HLSSettingsResponse(varHLSSettingsResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "auto_on")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "layout")
		delete(additionalProperties, "quality_tracks")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHLSSettingsResponse struct {
	value *HLSSettingsResponse
	isSet bool
}

func (v NullableHLSSettingsResponse) Get() *HLSSettingsResponse {
	return v.value
}

func (v *NullableHLSSettingsResponse) Set(val *HLSSettingsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHLSSettingsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHLSSettingsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHLSSettingsResponse(val *HLSSettingsResponse) *NullableHLSSettingsResponse {
	return &NullableHLSSettingsResponse{value: val, isSet: true}
}

func (v NullableHLSSettingsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHLSSettingsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


