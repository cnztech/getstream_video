/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
	"fmt"
)

// checks if the VideoSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VideoSettings{}

// VideoSettings struct for VideoSettings
type VideoSettings struct {
	AccessRequestEnabled bool `json:"access_request_enabled"`
	CameraDefaultOn bool `json:"camera_default_on"`
	CameraFacing string `json:"camera_facing"`
	Enabled bool `json:"enabled"`
	TargetResolution TargetResolution `json:"target_resolution"`
	AdditionalProperties map[string]interface{}
}

type _VideoSettings VideoSettings

// NewVideoSettings instantiates a new VideoSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVideoSettings(accessRequestEnabled bool, cameraDefaultOn bool, cameraFacing string, enabled bool, targetResolution TargetResolution) *VideoSettings {
	this := VideoSettings{}
	this.AccessRequestEnabled = accessRequestEnabled
	this.CameraDefaultOn = cameraDefaultOn
	this.CameraFacing = cameraFacing
	this.Enabled = enabled
	this.TargetResolution = targetResolution
	return &this
}

// NewVideoSettingsWithDefaults instantiates a new VideoSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVideoSettingsWithDefaults() *VideoSettings {
	this := VideoSettings{}
	return &this
}

// GetAccessRequestEnabled returns the AccessRequestEnabled field value
func (o *VideoSettings) GetAccessRequestEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AccessRequestEnabled
}

// GetAccessRequestEnabledOk returns a tuple with the AccessRequestEnabled field value
// and a boolean to check if the value has been set.
func (o *VideoSettings) GetAccessRequestEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessRequestEnabled, true
}

// SetAccessRequestEnabled sets field value
func (o *VideoSettings) SetAccessRequestEnabled(v bool) {
	o.AccessRequestEnabled = v
}

// GetCameraDefaultOn returns the CameraDefaultOn field value
func (o *VideoSettings) GetCameraDefaultOn() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CameraDefaultOn
}

// GetCameraDefaultOnOk returns a tuple with the CameraDefaultOn field value
// and a boolean to check if the value has been set.
func (o *VideoSettings) GetCameraDefaultOnOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CameraDefaultOn, true
}

// SetCameraDefaultOn sets field value
func (o *VideoSettings) SetCameraDefaultOn(v bool) {
	o.CameraDefaultOn = v
}

// GetCameraFacing returns the CameraFacing field value
func (o *VideoSettings) GetCameraFacing() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CameraFacing
}

// GetCameraFacingOk returns a tuple with the CameraFacing field value
// and a boolean to check if the value has been set.
func (o *VideoSettings) GetCameraFacingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CameraFacing, true
}

// SetCameraFacing sets field value
func (o *VideoSettings) SetCameraFacing(v string) {
	o.CameraFacing = v
}

// GetEnabled returns the Enabled field value
func (o *VideoSettings) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *VideoSettings) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *VideoSettings) SetEnabled(v bool) {
	o.Enabled = v
}

// GetTargetResolution returns the TargetResolution field value
func (o *VideoSettings) GetTargetResolution() TargetResolution {
	if o == nil {
		var ret TargetResolution
		return ret
	}

	return o.TargetResolution
}

// GetTargetResolutionOk returns a tuple with the TargetResolution field value
// and a boolean to check if the value has been set.
func (o *VideoSettings) GetTargetResolutionOk() (*TargetResolution, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetResolution, true
}

// SetTargetResolution sets field value
func (o *VideoSettings) SetTargetResolution(v TargetResolution) {
	o.TargetResolution = v
}

func (o VideoSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VideoSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["access_request_enabled"] = o.AccessRequestEnabled
	toSerialize["camera_default_on"] = o.CameraDefaultOn
	toSerialize["camera_facing"] = o.CameraFacing
	toSerialize["enabled"] = o.Enabled
	toSerialize["target_resolution"] = o.TargetResolution

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VideoSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"access_request_enabled",
		"camera_default_on",
		"camera_facing",
		"enabled",
		"target_resolution",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVideoSettings := _VideoSettings{}

	err = json.Unmarshal(data, &varVideoSettings)

	if err != nil {
		return err
	}

	*o = VideoSettings(varVideoSettings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "access_request_enabled")
		delete(additionalProperties, "camera_default_on")
		delete(additionalProperties, "camera_facing")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "target_resolution")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVideoSettings struct {
	value *VideoSettings
	isSet bool
}

func (v NullableVideoSettings) Get() *VideoSettings {
	return v.value
}

func (v *NullableVideoSettings) Set(val *VideoSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableVideoSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableVideoSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVideoSettings(val *VideoSettings) *NullableVideoSettings {
	return &NullableVideoSettings{value: val, isSet: true}
}

func (v NullableVideoSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVideoSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


