/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
	"fmt"
)

// checks if the NotificationSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationSettings{}

// NotificationSettings struct for NotificationSettings
type NotificationSettings struct {
	CallLiveStarted EventNotificationSettings `json:"call_live_started"`
	CallNotification EventNotificationSettings `json:"call_notification"`
	CallRing EventNotificationSettings `json:"call_ring"`
	Enabled bool `json:"enabled"`
	SessionStarted EventNotificationSettings `json:"session_started"`
	AdditionalProperties map[string]interface{}
}

type _NotificationSettings NotificationSettings

// NewNotificationSettings instantiates a new NotificationSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationSettings(callLiveStarted EventNotificationSettings, callNotification EventNotificationSettings, callRing EventNotificationSettings, enabled bool, sessionStarted EventNotificationSettings) *NotificationSettings {
	this := NotificationSettings{}
	this.CallLiveStarted = callLiveStarted
	this.CallNotification = callNotification
	this.CallRing = callRing
	this.Enabled = enabled
	this.SessionStarted = sessionStarted
	return &this
}

// NewNotificationSettingsWithDefaults instantiates a new NotificationSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationSettingsWithDefaults() *NotificationSettings {
	this := NotificationSettings{}
	return &this
}

// GetCallLiveStarted returns the CallLiveStarted field value
func (o *NotificationSettings) GetCallLiveStarted() EventNotificationSettings {
	if o == nil {
		var ret EventNotificationSettings
		return ret
	}

	return o.CallLiveStarted
}

// GetCallLiveStartedOk returns a tuple with the CallLiveStarted field value
// and a boolean to check if the value has been set.
func (o *NotificationSettings) GetCallLiveStartedOk() (*EventNotificationSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallLiveStarted, true
}

// SetCallLiveStarted sets field value
func (o *NotificationSettings) SetCallLiveStarted(v EventNotificationSettings) {
	o.CallLiveStarted = v
}

// GetCallNotification returns the CallNotification field value
func (o *NotificationSettings) GetCallNotification() EventNotificationSettings {
	if o == nil {
		var ret EventNotificationSettings
		return ret
	}

	return o.CallNotification
}

// GetCallNotificationOk returns a tuple with the CallNotification field value
// and a boolean to check if the value has been set.
func (o *NotificationSettings) GetCallNotificationOk() (*EventNotificationSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallNotification, true
}

// SetCallNotification sets field value
func (o *NotificationSettings) SetCallNotification(v EventNotificationSettings) {
	o.CallNotification = v
}

// GetCallRing returns the CallRing field value
func (o *NotificationSettings) GetCallRing() EventNotificationSettings {
	if o == nil {
		var ret EventNotificationSettings
		return ret
	}

	return o.CallRing
}

// GetCallRingOk returns a tuple with the CallRing field value
// and a boolean to check if the value has been set.
func (o *NotificationSettings) GetCallRingOk() (*EventNotificationSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallRing, true
}

// SetCallRing sets field value
func (o *NotificationSettings) SetCallRing(v EventNotificationSettings) {
	o.CallRing = v
}

// GetEnabled returns the Enabled field value
func (o *NotificationSettings) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *NotificationSettings) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *NotificationSettings) SetEnabled(v bool) {
	o.Enabled = v
}

// GetSessionStarted returns the SessionStarted field value
func (o *NotificationSettings) GetSessionStarted() EventNotificationSettings {
	if o == nil {
		var ret EventNotificationSettings
		return ret
	}

	return o.SessionStarted
}

// GetSessionStartedOk returns a tuple with the SessionStarted field value
// and a boolean to check if the value has been set.
func (o *NotificationSettings) GetSessionStartedOk() (*EventNotificationSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SessionStarted, true
}

// SetSessionStarted sets field value
func (o *NotificationSettings) SetSessionStarted(v EventNotificationSettings) {
	o.SessionStarted = v
}

func (o NotificationSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["call_live_started"] = o.CallLiveStarted
	toSerialize["call_notification"] = o.CallNotification
	toSerialize["call_ring"] = o.CallRing
	toSerialize["enabled"] = o.Enabled
	toSerialize["session_started"] = o.SessionStarted

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NotificationSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"call_live_started",
		"call_notification",
		"call_ring",
		"enabled",
		"session_started",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNotificationSettings := _NotificationSettings{}

	err = json.Unmarshal(data, &varNotificationSettings)

	if err != nil {
		return err
	}

	*o = NotificationSettings(varNotificationSettings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "call_live_started")
		delete(additionalProperties, "call_notification")
		delete(additionalProperties, "call_ring")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "session_started")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNotificationSettings struct {
	value *NotificationSettings
	isSet bool
}

func (v NullableNotificationSettings) Get() *NotificationSettings {
	return v.value
}

func (v *NullableNotificationSettings) Set(val *NotificationSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationSettings(val *NotificationSettings) *NullableNotificationSettings {
	return &NullableNotificationSettings{value: val, isSet: true}
}

func (v NullableNotificationSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


