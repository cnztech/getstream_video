/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
	"fmt"
)

// checks if the PinRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PinRequest{}

// PinRequest struct for PinRequest
type PinRequest struct {
	SessionId string `json:"session_id"`
	UserId string `json:"user_id"`
	AdditionalProperties map[string]interface{}
}

type _PinRequest PinRequest

// NewPinRequest instantiates a new PinRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPinRequest(sessionId string, userId string) *PinRequest {
	this := PinRequest{}
	this.SessionId = sessionId
	this.UserId = userId
	return &this
}

// NewPinRequestWithDefaults instantiates a new PinRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPinRequestWithDefaults() *PinRequest {
	this := PinRequest{}
	return &this
}

// GetSessionId returns the SessionId field value
func (o *PinRequest) GetSessionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value
// and a boolean to check if the value has been set.
func (o *PinRequest) GetSessionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SessionId, true
}

// SetSessionId sets field value
func (o *PinRequest) SetSessionId(v string) {
	o.SessionId = v
}

// GetUserId returns the UserId field value
func (o *PinRequest) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *PinRequest) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *PinRequest) SetUserId(v string) {
	o.UserId = v
}

func (o PinRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PinRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["session_id"] = o.SessionId
	toSerialize["user_id"] = o.UserId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PinRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"session_id",
		"user_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPinRequest := _PinRequest{}

	err = json.Unmarshal(data, &varPinRequest)

	if err != nil {
		return err
	}

	*o = PinRequest(varPinRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "session_id")
		delete(additionalProperties, "user_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePinRequest struct {
	value *PinRequest
	isSet bool
}

func (v NullablePinRequest) Get() *PinRequest {
	return v.value
}

func (v *NullablePinRequest) Set(val *PinRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePinRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePinRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePinRequest(val *PinRequest) *NullablePinRequest {
	return &NullablePinRequest{value: val, isSet: true}
}

func (v NullablePinRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePinRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


