/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the CallSessionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallSessionResponse{}

// CallSessionResponse struct for CallSessionResponse
type CallSessionResponse struct {
	AcceptedBy map[string]time.Time `json:"accepted_by"`
	EndedAt *time.Time `json:"ended_at,omitempty"`
	Id string `json:"id"`
	LiveEndedAt *time.Time `json:"live_ended_at,omitempty"`
	LiveStartedAt *time.Time `json:"live_started_at,omitempty"`
	Participants []CallParticipantResponse `json:"participants"`
	ParticipantsCountByRole map[string]int32 `json:"participants_count_by_role"`
	RejectedBy map[string]time.Time `json:"rejected_by"`
	StartedAt *time.Time `json:"started_at,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CallSessionResponse CallSessionResponse

// NewCallSessionResponse instantiates a new CallSessionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallSessionResponse(acceptedBy map[string]time.Time, id string, participants []CallParticipantResponse, participantsCountByRole map[string]int32, rejectedBy map[string]time.Time) *CallSessionResponse {
	this := CallSessionResponse{}
	this.AcceptedBy = acceptedBy
	this.Id = id
	this.Participants = participants
	this.ParticipantsCountByRole = participantsCountByRole
	this.RejectedBy = rejectedBy
	return &this
}

// NewCallSessionResponseWithDefaults instantiates a new CallSessionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallSessionResponseWithDefaults() *CallSessionResponse {
	this := CallSessionResponse{}
	return &this
}

// GetAcceptedBy returns the AcceptedBy field value
func (o *CallSessionResponse) GetAcceptedBy() map[string]time.Time {
	if o == nil {
		var ret map[string]time.Time
		return ret
	}

	return o.AcceptedBy
}

// GetAcceptedByOk returns a tuple with the AcceptedBy field value
// and a boolean to check if the value has been set.
func (o *CallSessionResponse) GetAcceptedByOk() (*map[string]time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AcceptedBy, true
}

// SetAcceptedBy sets field value
func (o *CallSessionResponse) SetAcceptedBy(v map[string]time.Time) {
	o.AcceptedBy = v
}

// GetEndedAt returns the EndedAt field value if set, zero value otherwise.
func (o *CallSessionResponse) GetEndedAt() time.Time {
	if o == nil || IsNil(o.EndedAt) {
		var ret time.Time
		return ret
	}
	return *o.EndedAt
}

// GetEndedAtOk returns a tuple with the EndedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallSessionResponse) GetEndedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndedAt) {
		return nil, false
	}
	return o.EndedAt, true
}

// HasEndedAt returns a boolean if a field has been set.
func (o *CallSessionResponse) HasEndedAt() bool {
	if o != nil && !IsNil(o.EndedAt) {
		return true
	}

	return false
}

// SetEndedAt gets a reference to the given time.Time and assigns it to the EndedAt field.
func (o *CallSessionResponse) SetEndedAt(v time.Time) {
	o.EndedAt = &v
}

// GetId returns the Id field value
func (o *CallSessionResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CallSessionResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CallSessionResponse) SetId(v string) {
	o.Id = v
}

// GetLiveEndedAt returns the LiveEndedAt field value if set, zero value otherwise.
func (o *CallSessionResponse) GetLiveEndedAt() time.Time {
	if o == nil || IsNil(o.LiveEndedAt) {
		var ret time.Time
		return ret
	}
	return *o.LiveEndedAt
}

// GetLiveEndedAtOk returns a tuple with the LiveEndedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallSessionResponse) GetLiveEndedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LiveEndedAt) {
		return nil, false
	}
	return o.LiveEndedAt, true
}

// HasLiveEndedAt returns a boolean if a field has been set.
func (o *CallSessionResponse) HasLiveEndedAt() bool {
	if o != nil && !IsNil(o.LiveEndedAt) {
		return true
	}

	return false
}

// SetLiveEndedAt gets a reference to the given time.Time and assigns it to the LiveEndedAt field.
func (o *CallSessionResponse) SetLiveEndedAt(v time.Time) {
	o.LiveEndedAt = &v
}

// GetLiveStartedAt returns the LiveStartedAt field value if set, zero value otherwise.
func (o *CallSessionResponse) GetLiveStartedAt() time.Time {
	if o == nil || IsNil(o.LiveStartedAt) {
		var ret time.Time
		return ret
	}
	return *o.LiveStartedAt
}

// GetLiveStartedAtOk returns a tuple with the LiveStartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallSessionResponse) GetLiveStartedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LiveStartedAt) {
		return nil, false
	}
	return o.LiveStartedAt, true
}

// HasLiveStartedAt returns a boolean if a field has been set.
func (o *CallSessionResponse) HasLiveStartedAt() bool {
	if o != nil && !IsNil(o.LiveStartedAt) {
		return true
	}

	return false
}

// SetLiveStartedAt gets a reference to the given time.Time and assigns it to the LiveStartedAt field.
func (o *CallSessionResponse) SetLiveStartedAt(v time.Time) {
	o.LiveStartedAt = &v
}

// GetParticipants returns the Participants field value
func (o *CallSessionResponse) GetParticipants() []CallParticipantResponse {
	if o == nil {
		var ret []CallParticipantResponse
		return ret
	}

	return o.Participants
}

// GetParticipantsOk returns a tuple with the Participants field value
// and a boolean to check if the value has been set.
func (o *CallSessionResponse) GetParticipantsOk() ([]CallParticipantResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Participants, true
}

// SetParticipants sets field value
func (o *CallSessionResponse) SetParticipants(v []CallParticipantResponse) {
	o.Participants = v
}

// GetParticipantsCountByRole returns the ParticipantsCountByRole field value
func (o *CallSessionResponse) GetParticipantsCountByRole() map[string]int32 {
	if o == nil {
		var ret map[string]int32
		return ret
	}

	return o.ParticipantsCountByRole
}

// GetParticipantsCountByRoleOk returns a tuple with the ParticipantsCountByRole field value
// and a boolean to check if the value has been set.
func (o *CallSessionResponse) GetParticipantsCountByRoleOk() (*map[string]int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParticipantsCountByRole, true
}

// SetParticipantsCountByRole sets field value
func (o *CallSessionResponse) SetParticipantsCountByRole(v map[string]int32) {
	o.ParticipantsCountByRole = v
}

// GetRejectedBy returns the RejectedBy field value
func (o *CallSessionResponse) GetRejectedBy() map[string]time.Time {
	if o == nil {
		var ret map[string]time.Time
		return ret
	}

	return o.RejectedBy
}

// GetRejectedByOk returns a tuple with the RejectedBy field value
// and a boolean to check if the value has been set.
func (o *CallSessionResponse) GetRejectedByOk() (*map[string]time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RejectedBy, true
}

// SetRejectedBy sets field value
func (o *CallSessionResponse) SetRejectedBy(v map[string]time.Time) {
	o.RejectedBy = v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *CallSessionResponse) GetStartedAt() time.Time {
	if o == nil || IsNil(o.StartedAt) {
		var ret time.Time
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallSessionResponse) GetStartedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartedAt) {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *CallSessionResponse) HasStartedAt() bool {
	if o != nil && !IsNil(o.StartedAt) {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given time.Time and assigns it to the StartedAt field.
func (o *CallSessionResponse) SetStartedAt(v time.Time) {
	o.StartedAt = &v
}

func (o CallSessionResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallSessionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accepted_by"] = o.AcceptedBy
	if !IsNil(o.EndedAt) {
		toSerialize["ended_at"] = o.EndedAt
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.LiveEndedAt) {
		toSerialize["live_ended_at"] = o.LiveEndedAt
	}
	if !IsNil(o.LiveStartedAt) {
		toSerialize["live_started_at"] = o.LiveStartedAt
	}
	toSerialize["participants"] = o.Participants
	toSerialize["participants_count_by_role"] = o.ParticipantsCountByRole
	toSerialize["rejected_by"] = o.RejectedBy
	if !IsNil(o.StartedAt) {
		toSerialize["started_at"] = o.StartedAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CallSessionResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accepted_by",
		"id",
		"participants",
		"participants_count_by_role",
		"rejected_by",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCallSessionResponse := _CallSessionResponse{}

	err = json.Unmarshal(data, &varCallSessionResponse)

	if err != nil {
		return err
	}

	*o = CallSessionResponse(varCallSessionResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accepted_by")
		delete(additionalProperties, "ended_at")
		delete(additionalProperties, "id")
		delete(additionalProperties, "live_ended_at")
		delete(additionalProperties, "live_started_at")
		delete(additionalProperties, "participants")
		delete(additionalProperties, "participants_count_by_role")
		delete(additionalProperties, "rejected_by")
		delete(additionalProperties, "started_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCallSessionResponse struct {
	value *CallSessionResponse
	isSet bool
}

func (v NullableCallSessionResponse) Get() *CallSessionResponse {
	return v.value
}

func (v *NullableCallSessionResponse) Set(val *CallSessionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCallSessionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCallSessionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallSessionResponse(val *CallSessionResponse) *NullableCallSessionResponse {
	return &NullableCallSessionResponse{value: val, isSet: true}
}

func (v NullableCallSessionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallSessionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


