/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Device type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Device{}

// Device struct for Device
type Device struct {
	// Date/time of creation
	CreatedAt time.Time `json:"created_at"`
	// Whether device is disabled or not
	Disabled *bool `json:"disabled,omitempty"`
	// Reason explaining why device had been disabled
	DisabledReason *string `json:"disabled_reason,omitempty"`
	Id string `json:"id"`
	PushProvider string `json:"push_provider"`
	PushProviderName *string `json:"push_provider_name,omitempty"`
	// When true the token is for Apple VoIP push notifications
	Voip *bool `json:"voip,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Device Device

// NewDevice instantiates a new Device object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevice(createdAt time.Time, id string, pushProvider string) *Device {
	this := Device{}
	this.CreatedAt = createdAt
	this.Id = id
	this.PushProvider = pushProvider
	return &this
}

// NewDeviceWithDefaults instantiates a new Device object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceWithDefaults() *Device {
	this := Device{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *Device) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Device) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Device) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *Device) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *Device) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *Device) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetDisabledReason returns the DisabledReason field value if set, zero value otherwise.
func (o *Device) GetDisabledReason() string {
	if o == nil || IsNil(o.DisabledReason) {
		var ret string
		return ret
	}
	return *o.DisabledReason
}

// GetDisabledReasonOk returns a tuple with the DisabledReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetDisabledReasonOk() (*string, bool) {
	if o == nil || IsNil(o.DisabledReason) {
		return nil, false
	}
	return o.DisabledReason, true
}

// HasDisabledReason returns a boolean if a field has been set.
func (o *Device) HasDisabledReason() bool {
	if o != nil && !IsNil(o.DisabledReason) {
		return true
	}

	return false
}

// SetDisabledReason gets a reference to the given string and assigns it to the DisabledReason field.
func (o *Device) SetDisabledReason(v string) {
	o.DisabledReason = &v
}

// GetId returns the Id field value
func (o *Device) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Device) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Device) SetId(v string) {
	o.Id = v
}

// GetPushProvider returns the PushProvider field value
func (o *Device) GetPushProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PushProvider
}

// GetPushProviderOk returns a tuple with the PushProvider field value
// and a boolean to check if the value has been set.
func (o *Device) GetPushProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PushProvider, true
}

// SetPushProvider sets field value
func (o *Device) SetPushProvider(v string) {
	o.PushProvider = v
}

// GetPushProviderName returns the PushProviderName field value if set, zero value otherwise.
func (o *Device) GetPushProviderName() string {
	if o == nil || IsNil(o.PushProviderName) {
		var ret string
		return ret
	}
	return *o.PushProviderName
}

// GetPushProviderNameOk returns a tuple with the PushProviderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetPushProviderNameOk() (*string, bool) {
	if o == nil || IsNil(o.PushProviderName) {
		return nil, false
	}
	return o.PushProviderName, true
}

// HasPushProviderName returns a boolean if a field has been set.
func (o *Device) HasPushProviderName() bool {
	if o != nil && !IsNil(o.PushProviderName) {
		return true
	}

	return false
}

// SetPushProviderName gets a reference to the given string and assigns it to the PushProviderName field.
func (o *Device) SetPushProviderName(v string) {
	o.PushProviderName = &v
}

// GetVoip returns the Voip field value if set, zero value otherwise.
func (o *Device) GetVoip() bool {
	if o == nil || IsNil(o.Voip) {
		var ret bool
		return ret
	}
	return *o.Voip
}

// GetVoipOk returns a tuple with the Voip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetVoipOk() (*bool, bool) {
	if o == nil || IsNil(o.Voip) {
		return nil, false
	}
	return o.Voip, true
}

// HasVoip returns a boolean if a field has been set.
func (o *Device) HasVoip() bool {
	if o != nil && !IsNil(o.Voip) {
		return true
	}

	return false
}

// SetVoip gets a reference to the given bool and assigns it to the Voip field.
func (o *Device) SetVoip(v bool) {
	o.Voip = &v
}

func (o Device) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Device) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created_at"] = o.CreatedAt
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.DisabledReason) {
		toSerialize["disabled_reason"] = o.DisabledReason
	}
	toSerialize["id"] = o.Id
	toSerialize["push_provider"] = o.PushProvider
	if !IsNil(o.PushProviderName) {
		toSerialize["push_provider_name"] = o.PushProviderName
	}
	if !IsNil(o.Voip) {
		toSerialize["voip"] = o.Voip
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Device) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created_at",
		"id",
		"push_provider",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDevice := _Device{}

	err = json.Unmarshal(data, &varDevice)

	if err != nil {
		return err
	}

	*o = Device(varDevice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "disabled_reason")
		delete(additionalProperties, "id")
		delete(additionalProperties, "push_provider")
		delete(additionalProperties, "push_provider_name")
		delete(additionalProperties, "voip")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDevice struct {
	value *Device
	isSet bool
}

func (v NullableDevice) Get() *Device {
	return v.value
}

func (v *NullableDevice) Set(val *Device) {
	v.value = val
	v.isSet = true
}

func (v NullableDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevice(val *Device) *NullableDevice {
	return &NullableDevice{value: val, isSet: true}
}

func (v NullableDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


