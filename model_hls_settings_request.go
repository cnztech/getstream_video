/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
)

// checks if the HLSSettingsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HLSSettingsRequest{}

// HLSSettingsRequest struct for HLSSettingsRequest
type HLSSettingsRequest struct {
	AutoOn *bool `json:"auto_on,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Layout *LayoutSettingsRequest `json:"layout,omitempty"`
	QualityTracks []string `json:"quality_tracks,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HLSSettingsRequest HLSSettingsRequest

// NewHLSSettingsRequest instantiates a new HLSSettingsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHLSSettingsRequest() *HLSSettingsRequest {
	this := HLSSettingsRequest{}
	return &this
}

// NewHLSSettingsRequestWithDefaults instantiates a new HLSSettingsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHLSSettingsRequestWithDefaults() *HLSSettingsRequest {
	this := HLSSettingsRequest{}
	return &this
}

// GetAutoOn returns the AutoOn field value if set, zero value otherwise.
func (o *HLSSettingsRequest) GetAutoOn() bool {
	if o == nil || IsNil(o.AutoOn) {
		var ret bool
		return ret
	}
	return *o.AutoOn
}

// GetAutoOnOk returns a tuple with the AutoOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HLSSettingsRequest) GetAutoOnOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoOn) {
		return nil, false
	}
	return o.AutoOn, true
}

// HasAutoOn returns a boolean if a field has been set.
func (o *HLSSettingsRequest) HasAutoOn() bool {
	if o != nil && !IsNil(o.AutoOn) {
		return true
	}

	return false
}

// SetAutoOn gets a reference to the given bool and assigns it to the AutoOn field.
func (o *HLSSettingsRequest) SetAutoOn(v bool) {
	o.AutoOn = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *HLSSettingsRequest) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HLSSettingsRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *HLSSettingsRequest) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *HLSSettingsRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetLayout returns the Layout field value if set, zero value otherwise.
func (o *HLSSettingsRequest) GetLayout() LayoutSettingsRequest {
	if o == nil || IsNil(o.Layout) {
		var ret LayoutSettingsRequest
		return ret
	}
	return *o.Layout
}

// GetLayoutOk returns a tuple with the Layout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HLSSettingsRequest) GetLayoutOk() (*LayoutSettingsRequest, bool) {
	if o == nil || IsNil(o.Layout) {
		return nil, false
	}
	return o.Layout, true
}

// HasLayout returns a boolean if a field has been set.
func (o *HLSSettingsRequest) HasLayout() bool {
	if o != nil && !IsNil(o.Layout) {
		return true
	}

	return false
}

// SetLayout gets a reference to the given LayoutSettingsRequest and assigns it to the Layout field.
func (o *HLSSettingsRequest) SetLayout(v LayoutSettingsRequest) {
	o.Layout = &v
}

// GetQualityTracks returns the QualityTracks field value if set, zero value otherwise.
func (o *HLSSettingsRequest) GetQualityTracks() []string {
	if o == nil || IsNil(o.QualityTracks) {
		var ret []string
		return ret
	}
	return o.QualityTracks
}

// GetQualityTracksOk returns a tuple with the QualityTracks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HLSSettingsRequest) GetQualityTracksOk() ([]string, bool) {
	if o == nil || IsNil(o.QualityTracks) {
		return nil, false
	}
	return o.QualityTracks, true
}

// HasQualityTracks returns a boolean if a field has been set.
func (o *HLSSettingsRequest) HasQualityTracks() bool {
	if o != nil && !IsNil(o.QualityTracks) {
		return true
	}

	return false
}

// SetQualityTracks gets a reference to the given []string and assigns it to the QualityTracks field.
func (o *HLSSettingsRequest) SetQualityTracks(v []string) {
	o.QualityTracks = v
}

func (o HLSSettingsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HLSSettingsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AutoOn) {
		toSerialize["auto_on"] = o.AutoOn
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Layout) {
		toSerialize["layout"] = o.Layout
	}
	if !IsNil(o.QualityTracks) {
		toSerialize["quality_tracks"] = o.QualityTracks
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HLSSettingsRequest) UnmarshalJSON(data []byte) (err error) {
	varHLSSettingsRequest := _HLSSettingsRequest{}

	err = json.Unmarshal(data, &varHLSSettingsRequest)

	if err != nil {
		return err
	}

	*o = HLSSettingsRequest(varHLSSettingsRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "auto_on")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "layout")
		delete(additionalProperties, "quality_tracks")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHLSSettingsRequest struct {
	value *HLSSettingsRequest
	isSet bool
}

func (v NullableHLSSettingsRequest) Get() *HLSSettingsRequest {
	return v.value
}

func (v *NullableHLSSettingsRequest) Set(val *HLSSettingsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableHLSSettingsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableHLSSettingsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHLSSettingsRequest(val *HLSSettingsRequest) *NullableHLSSettingsRequest {
	return &NullableHLSSettingsRequest{value: val, isSet: true}
}

func (v NullableHLSSettingsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHLSSettingsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


