/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
	"fmt"
)

// checks if the Location type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Location{}

// Location struct for Location
type Location struct {
	ContinentCode string `json:"continent_code"`
	CountryIsoCode string `json:"country_iso_code"`
	SubdivisionIsoCode string `json:"subdivision_iso_code"`
	AdditionalProperties map[string]interface{}
}

type _Location Location

// NewLocation instantiates a new Location object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocation(continentCode string, countryIsoCode string, subdivisionIsoCode string) *Location {
	this := Location{}
	this.ContinentCode = continentCode
	this.CountryIsoCode = countryIsoCode
	this.SubdivisionIsoCode = subdivisionIsoCode
	return &this
}

// NewLocationWithDefaults instantiates a new Location object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationWithDefaults() *Location {
	this := Location{}
	return &this
}

// GetContinentCode returns the ContinentCode field value
func (o *Location) GetContinentCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContinentCode
}

// GetContinentCodeOk returns a tuple with the ContinentCode field value
// and a boolean to check if the value has been set.
func (o *Location) GetContinentCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContinentCode, true
}

// SetContinentCode sets field value
func (o *Location) SetContinentCode(v string) {
	o.ContinentCode = v
}

// GetCountryIsoCode returns the CountryIsoCode field value
func (o *Location) GetCountryIsoCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CountryIsoCode
}

// GetCountryIsoCodeOk returns a tuple with the CountryIsoCode field value
// and a boolean to check if the value has been set.
func (o *Location) GetCountryIsoCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountryIsoCode, true
}

// SetCountryIsoCode sets field value
func (o *Location) SetCountryIsoCode(v string) {
	o.CountryIsoCode = v
}

// GetSubdivisionIsoCode returns the SubdivisionIsoCode field value
func (o *Location) GetSubdivisionIsoCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubdivisionIsoCode
}

// GetSubdivisionIsoCodeOk returns a tuple with the SubdivisionIsoCode field value
// and a boolean to check if the value has been set.
func (o *Location) GetSubdivisionIsoCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubdivisionIsoCode, true
}

// SetSubdivisionIsoCode sets field value
func (o *Location) SetSubdivisionIsoCode(v string) {
	o.SubdivisionIsoCode = v
}

func (o Location) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Location) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["continent_code"] = o.ContinentCode
	toSerialize["country_iso_code"] = o.CountryIsoCode
	toSerialize["subdivision_iso_code"] = o.SubdivisionIsoCode

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Location) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"continent_code",
		"country_iso_code",
		"subdivision_iso_code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLocation := _Location{}

	err = json.Unmarshal(data, &varLocation)

	if err != nil {
		return err
	}

	*o = Location(varLocation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "continent_code")
		delete(additionalProperties, "country_iso_code")
		delete(additionalProperties, "subdivision_iso_code")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLocation struct {
	value *Location
	isSet bool
}

func (v NullableLocation) Get() *Location {
	return v.value
}

func (v *NullableLocation) Set(val *Location) {
	v.value = val
	v.isSet = true
}

func (v NullableLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocation(val *Location) *NullableLocation {
	return &NullableLocation{value: val, isSet: true}
}

func (v NullableLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


