/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
)

// checks if the BroadcastSettingsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BroadcastSettingsRequest{}

// BroadcastSettingsRequest struct for BroadcastSettingsRequest
type BroadcastSettingsRequest struct {
	Enabled *bool `json:"enabled,omitempty"`
	Hls *HLSSettingsRequest `json:"hls,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BroadcastSettingsRequest BroadcastSettingsRequest

// NewBroadcastSettingsRequest instantiates a new BroadcastSettingsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBroadcastSettingsRequest() *BroadcastSettingsRequest {
	this := BroadcastSettingsRequest{}
	return &this
}

// NewBroadcastSettingsRequestWithDefaults instantiates a new BroadcastSettingsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBroadcastSettingsRequestWithDefaults() *BroadcastSettingsRequest {
	this := BroadcastSettingsRequest{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *BroadcastSettingsRequest) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BroadcastSettingsRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *BroadcastSettingsRequest) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *BroadcastSettingsRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetHls returns the Hls field value if set, zero value otherwise.
func (o *BroadcastSettingsRequest) GetHls() HLSSettingsRequest {
	if o == nil || IsNil(o.Hls) {
		var ret HLSSettingsRequest
		return ret
	}
	return *o.Hls
}

// GetHlsOk returns a tuple with the Hls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BroadcastSettingsRequest) GetHlsOk() (*HLSSettingsRequest, bool) {
	if o == nil || IsNil(o.Hls) {
		return nil, false
	}
	return o.Hls, true
}

// HasHls returns a boolean if a field has been set.
func (o *BroadcastSettingsRequest) HasHls() bool {
	if o != nil && !IsNil(o.Hls) {
		return true
	}

	return false
}

// SetHls gets a reference to the given HLSSettingsRequest and assigns it to the Hls field.
func (o *BroadcastSettingsRequest) SetHls(v HLSSettingsRequest) {
	o.Hls = &v
}

func (o BroadcastSettingsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BroadcastSettingsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Hls) {
		toSerialize["hls"] = o.Hls
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BroadcastSettingsRequest) UnmarshalJSON(data []byte) (err error) {
	varBroadcastSettingsRequest := _BroadcastSettingsRequest{}

	err = json.Unmarshal(data, &varBroadcastSettingsRequest)

	if err != nil {
		return err
	}

	*o = BroadcastSettingsRequest(varBroadcastSettingsRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "hls")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBroadcastSettingsRequest struct {
	value *BroadcastSettingsRequest
	isSet bool
}

func (v NullableBroadcastSettingsRequest) Get() *BroadcastSettingsRequest {
	return v.value
}

func (v *NullableBroadcastSettingsRequest) Set(val *BroadcastSettingsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBroadcastSettingsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBroadcastSettingsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBroadcastSettingsRequest(val *BroadcastSettingsRequest) *NullableBroadcastSettingsRequest {
	return &NullableBroadcastSettingsRequest{value: val, isSet: true}
}

func (v NullableBroadcastSettingsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBroadcastSettingsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


