/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
	"fmt"
)

// checks if the EventNotificationSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventNotificationSettings{}

// EventNotificationSettings struct for EventNotificationSettings
type EventNotificationSettings struct {
	Apns APNS `json:"apns"`
	Enabled bool `json:"enabled"`
	AdditionalProperties map[string]interface{}
}

type _EventNotificationSettings EventNotificationSettings

// NewEventNotificationSettings instantiates a new EventNotificationSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventNotificationSettings(apns APNS, enabled bool) *EventNotificationSettings {
	this := EventNotificationSettings{}
	this.Apns = apns
	this.Enabled = enabled
	return &this
}

// NewEventNotificationSettingsWithDefaults instantiates a new EventNotificationSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventNotificationSettingsWithDefaults() *EventNotificationSettings {
	this := EventNotificationSettings{}
	return &this
}

// GetApns returns the Apns field value
func (o *EventNotificationSettings) GetApns() APNS {
	if o == nil {
		var ret APNS
		return ret
	}

	return o.Apns
}

// GetApnsOk returns a tuple with the Apns field value
// and a boolean to check if the value has been set.
func (o *EventNotificationSettings) GetApnsOk() (*APNS, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Apns, true
}

// SetApns sets field value
func (o *EventNotificationSettings) SetApns(v APNS) {
	o.Apns = v
}

// GetEnabled returns the Enabled field value
func (o *EventNotificationSettings) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *EventNotificationSettings) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *EventNotificationSettings) SetEnabled(v bool) {
	o.Enabled = v
}

func (o EventNotificationSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventNotificationSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["apns"] = o.Apns
	toSerialize["enabled"] = o.Enabled

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EventNotificationSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"apns",
		"enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventNotificationSettings := _EventNotificationSettings{}

	err = json.Unmarshal(data, &varEventNotificationSettings)

	if err != nil {
		return err
	}

	*o = EventNotificationSettings(varEventNotificationSettings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "apns")
		delete(additionalProperties, "enabled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEventNotificationSettings struct {
	value *EventNotificationSettings
	isSet bool
}

func (v NullableEventNotificationSettings) Get() *EventNotificationSettings {
	return v.value
}

func (v *NullableEventNotificationSettings) Set(val *EventNotificationSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableEventNotificationSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableEventNotificationSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventNotificationSettings(val *EventNotificationSettings) *NullableEventNotificationSettings {
	return &NullableEventNotificationSettings{value: val, isSet: true}
}

func (v NullableEventNotificationSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventNotificationSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


