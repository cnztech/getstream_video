/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
)

// checks if the CallSettingsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallSettingsRequest{}

// CallSettingsRequest struct for CallSettingsRequest
type CallSettingsRequest struct {
	Audio *AudioSettingsRequest `json:"audio,omitempty"`
	Backstage *BackstageSettingsRequest `json:"backstage,omitempty"`
	Broadcasting *BroadcastSettingsRequest `json:"broadcasting,omitempty"`
	Geofencing *GeofenceSettingsRequest `json:"geofencing,omitempty"`
	Recording *RecordSettingsRequest `json:"recording,omitempty"`
	Ring *RingSettingsRequest `json:"ring,omitempty"`
	Screensharing *ScreensharingSettingsRequest `json:"screensharing,omitempty"`
	Thumbnails *ThumbnailsSettingsRequest `json:"thumbnails,omitempty"`
	Transcription *TranscriptionSettingsRequest `json:"transcription,omitempty"`
	Video *VideoSettingsRequest `json:"video,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CallSettingsRequest CallSettingsRequest

// NewCallSettingsRequest instantiates a new CallSettingsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallSettingsRequest() *CallSettingsRequest {
	this := CallSettingsRequest{}
	return &this
}

// NewCallSettingsRequestWithDefaults instantiates a new CallSettingsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallSettingsRequestWithDefaults() *CallSettingsRequest {
	this := CallSettingsRequest{}
	return &this
}

// GetAudio returns the Audio field value if set, zero value otherwise.
func (o *CallSettingsRequest) GetAudio() AudioSettingsRequest {
	if o == nil || IsNil(o.Audio) {
		var ret AudioSettingsRequest
		return ret
	}
	return *o.Audio
}

// GetAudioOk returns a tuple with the Audio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallSettingsRequest) GetAudioOk() (*AudioSettingsRequest, bool) {
	if o == nil || IsNil(o.Audio) {
		return nil, false
	}
	return o.Audio, true
}

// HasAudio returns a boolean if a field has been set.
func (o *CallSettingsRequest) HasAudio() bool {
	if o != nil && !IsNil(o.Audio) {
		return true
	}

	return false
}

// SetAudio gets a reference to the given AudioSettingsRequest and assigns it to the Audio field.
func (o *CallSettingsRequest) SetAudio(v AudioSettingsRequest) {
	o.Audio = &v
}

// GetBackstage returns the Backstage field value if set, zero value otherwise.
func (o *CallSettingsRequest) GetBackstage() BackstageSettingsRequest {
	if o == nil || IsNil(o.Backstage) {
		var ret BackstageSettingsRequest
		return ret
	}
	return *o.Backstage
}

// GetBackstageOk returns a tuple with the Backstage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallSettingsRequest) GetBackstageOk() (*BackstageSettingsRequest, bool) {
	if o == nil || IsNil(o.Backstage) {
		return nil, false
	}
	return o.Backstage, true
}

// HasBackstage returns a boolean if a field has been set.
func (o *CallSettingsRequest) HasBackstage() bool {
	if o != nil && !IsNil(o.Backstage) {
		return true
	}

	return false
}

// SetBackstage gets a reference to the given BackstageSettingsRequest and assigns it to the Backstage field.
func (o *CallSettingsRequest) SetBackstage(v BackstageSettingsRequest) {
	o.Backstage = &v
}

// GetBroadcasting returns the Broadcasting field value if set, zero value otherwise.
func (o *CallSettingsRequest) GetBroadcasting() BroadcastSettingsRequest {
	if o == nil || IsNil(o.Broadcasting) {
		var ret BroadcastSettingsRequest
		return ret
	}
	return *o.Broadcasting
}

// GetBroadcastingOk returns a tuple with the Broadcasting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallSettingsRequest) GetBroadcastingOk() (*BroadcastSettingsRequest, bool) {
	if o == nil || IsNil(o.Broadcasting) {
		return nil, false
	}
	return o.Broadcasting, true
}

// HasBroadcasting returns a boolean if a field has been set.
func (o *CallSettingsRequest) HasBroadcasting() bool {
	if o != nil && !IsNil(o.Broadcasting) {
		return true
	}

	return false
}

// SetBroadcasting gets a reference to the given BroadcastSettingsRequest and assigns it to the Broadcasting field.
func (o *CallSettingsRequest) SetBroadcasting(v BroadcastSettingsRequest) {
	o.Broadcasting = &v
}

// GetGeofencing returns the Geofencing field value if set, zero value otherwise.
func (o *CallSettingsRequest) GetGeofencing() GeofenceSettingsRequest {
	if o == nil || IsNil(o.Geofencing) {
		var ret GeofenceSettingsRequest
		return ret
	}
	return *o.Geofencing
}

// GetGeofencingOk returns a tuple with the Geofencing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallSettingsRequest) GetGeofencingOk() (*GeofenceSettingsRequest, bool) {
	if o == nil || IsNil(o.Geofencing) {
		return nil, false
	}
	return o.Geofencing, true
}

// HasGeofencing returns a boolean if a field has been set.
func (o *CallSettingsRequest) HasGeofencing() bool {
	if o != nil && !IsNil(o.Geofencing) {
		return true
	}

	return false
}

// SetGeofencing gets a reference to the given GeofenceSettingsRequest and assigns it to the Geofencing field.
func (o *CallSettingsRequest) SetGeofencing(v GeofenceSettingsRequest) {
	o.Geofencing = &v
}

// GetRecording returns the Recording field value if set, zero value otherwise.
func (o *CallSettingsRequest) GetRecording() RecordSettingsRequest {
	if o == nil || IsNil(o.Recording) {
		var ret RecordSettingsRequest
		return ret
	}
	return *o.Recording
}

// GetRecordingOk returns a tuple with the Recording field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallSettingsRequest) GetRecordingOk() (*RecordSettingsRequest, bool) {
	if o == nil || IsNil(o.Recording) {
		return nil, false
	}
	return o.Recording, true
}

// HasRecording returns a boolean if a field has been set.
func (o *CallSettingsRequest) HasRecording() bool {
	if o != nil && !IsNil(o.Recording) {
		return true
	}

	return false
}

// SetRecording gets a reference to the given RecordSettingsRequest and assigns it to the Recording field.
func (o *CallSettingsRequest) SetRecording(v RecordSettingsRequest) {
	o.Recording = &v
}

// GetRing returns the Ring field value if set, zero value otherwise.
func (o *CallSettingsRequest) GetRing() RingSettingsRequest {
	if o == nil || IsNil(o.Ring) {
		var ret RingSettingsRequest
		return ret
	}
	return *o.Ring
}

// GetRingOk returns a tuple with the Ring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallSettingsRequest) GetRingOk() (*RingSettingsRequest, bool) {
	if o == nil || IsNil(o.Ring) {
		return nil, false
	}
	return o.Ring, true
}

// HasRing returns a boolean if a field has been set.
func (o *CallSettingsRequest) HasRing() bool {
	if o != nil && !IsNil(o.Ring) {
		return true
	}

	return false
}

// SetRing gets a reference to the given RingSettingsRequest and assigns it to the Ring field.
func (o *CallSettingsRequest) SetRing(v RingSettingsRequest) {
	o.Ring = &v
}

// GetScreensharing returns the Screensharing field value if set, zero value otherwise.
func (o *CallSettingsRequest) GetScreensharing() ScreensharingSettingsRequest {
	if o == nil || IsNil(o.Screensharing) {
		var ret ScreensharingSettingsRequest
		return ret
	}
	return *o.Screensharing
}

// GetScreensharingOk returns a tuple with the Screensharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallSettingsRequest) GetScreensharingOk() (*ScreensharingSettingsRequest, bool) {
	if o == nil || IsNil(o.Screensharing) {
		return nil, false
	}
	return o.Screensharing, true
}

// HasScreensharing returns a boolean if a field has been set.
func (o *CallSettingsRequest) HasScreensharing() bool {
	if o != nil && !IsNil(o.Screensharing) {
		return true
	}

	return false
}

// SetScreensharing gets a reference to the given ScreensharingSettingsRequest and assigns it to the Screensharing field.
func (o *CallSettingsRequest) SetScreensharing(v ScreensharingSettingsRequest) {
	o.Screensharing = &v
}

// GetThumbnails returns the Thumbnails field value if set, zero value otherwise.
func (o *CallSettingsRequest) GetThumbnails() ThumbnailsSettingsRequest {
	if o == nil || IsNil(o.Thumbnails) {
		var ret ThumbnailsSettingsRequest
		return ret
	}
	return *o.Thumbnails
}

// GetThumbnailsOk returns a tuple with the Thumbnails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallSettingsRequest) GetThumbnailsOk() (*ThumbnailsSettingsRequest, bool) {
	if o == nil || IsNil(o.Thumbnails) {
		return nil, false
	}
	return o.Thumbnails, true
}

// HasThumbnails returns a boolean if a field has been set.
func (o *CallSettingsRequest) HasThumbnails() bool {
	if o != nil && !IsNil(o.Thumbnails) {
		return true
	}

	return false
}

// SetThumbnails gets a reference to the given ThumbnailsSettingsRequest and assigns it to the Thumbnails field.
func (o *CallSettingsRequest) SetThumbnails(v ThumbnailsSettingsRequest) {
	o.Thumbnails = &v
}

// GetTranscription returns the Transcription field value if set, zero value otherwise.
func (o *CallSettingsRequest) GetTranscription() TranscriptionSettingsRequest {
	if o == nil || IsNil(o.Transcription) {
		var ret TranscriptionSettingsRequest
		return ret
	}
	return *o.Transcription
}

// GetTranscriptionOk returns a tuple with the Transcription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallSettingsRequest) GetTranscriptionOk() (*TranscriptionSettingsRequest, bool) {
	if o == nil || IsNil(o.Transcription) {
		return nil, false
	}
	return o.Transcription, true
}

// HasTranscription returns a boolean if a field has been set.
func (o *CallSettingsRequest) HasTranscription() bool {
	if o != nil && !IsNil(o.Transcription) {
		return true
	}

	return false
}

// SetTranscription gets a reference to the given TranscriptionSettingsRequest and assigns it to the Transcription field.
func (o *CallSettingsRequest) SetTranscription(v TranscriptionSettingsRequest) {
	o.Transcription = &v
}

// GetVideo returns the Video field value if set, zero value otherwise.
func (o *CallSettingsRequest) GetVideo() VideoSettingsRequest {
	if o == nil || IsNil(o.Video) {
		var ret VideoSettingsRequest
		return ret
	}
	return *o.Video
}

// GetVideoOk returns a tuple with the Video field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallSettingsRequest) GetVideoOk() (*VideoSettingsRequest, bool) {
	if o == nil || IsNil(o.Video) {
		return nil, false
	}
	return o.Video, true
}

// HasVideo returns a boolean if a field has been set.
func (o *CallSettingsRequest) HasVideo() bool {
	if o != nil && !IsNil(o.Video) {
		return true
	}

	return false
}

// SetVideo gets a reference to the given VideoSettingsRequest and assigns it to the Video field.
func (o *CallSettingsRequest) SetVideo(v VideoSettingsRequest) {
	o.Video = &v
}

func (o CallSettingsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallSettingsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Audio) {
		toSerialize["audio"] = o.Audio
	}
	if !IsNil(o.Backstage) {
		toSerialize["backstage"] = o.Backstage
	}
	if !IsNil(o.Broadcasting) {
		toSerialize["broadcasting"] = o.Broadcasting
	}
	if !IsNil(o.Geofencing) {
		toSerialize["geofencing"] = o.Geofencing
	}
	if !IsNil(o.Recording) {
		toSerialize["recording"] = o.Recording
	}
	if !IsNil(o.Ring) {
		toSerialize["ring"] = o.Ring
	}
	if !IsNil(o.Screensharing) {
		toSerialize["screensharing"] = o.Screensharing
	}
	if !IsNil(o.Thumbnails) {
		toSerialize["thumbnails"] = o.Thumbnails
	}
	if !IsNil(o.Transcription) {
		toSerialize["transcription"] = o.Transcription
	}
	if !IsNil(o.Video) {
		toSerialize["video"] = o.Video
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CallSettingsRequest) UnmarshalJSON(data []byte) (err error) {
	varCallSettingsRequest := _CallSettingsRequest{}

	err = json.Unmarshal(data, &varCallSettingsRequest)

	if err != nil {
		return err
	}

	*o = CallSettingsRequest(varCallSettingsRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "audio")
		delete(additionalProperties, "backstage")
		delete(additionalProperties, "broadcasting")
		delete(additionalProperties, "geofencing")
		delete(additionalProperties, "recording")
		delete(additionalProperties, "ring")
		delete(additionalProperties, "screensharing")
		delete(additionalProperties, "thumbnails")
		delete(additionalProperties, "transcription")
		delete(additionalProperties, "video")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCallSettingsRequest struct {
	value *CallSettingsRequest
	isSet bool
}

func (v NullableCallSettingsRequest) Get() *CallSettingsRequest {
	return v.value
}

func (v *NullableCallSettingsRequest) Set(val *CallSettingsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCallSettingsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCallSettingsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallSettingsRequest(val *CallSettingsRequest) *NullableCallSettingsRequest {
	return &NullableCallSettingsRequest{value: val, isSet: true}
}

func (v NullableCallSettingsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallSettingsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


