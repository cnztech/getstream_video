/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
	"fmt"
)

// checks if the CallEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallEvent{}

// CallEvent struct for CallEvent
type CallEvent struct {
	Description string `json:"description"`
	Severity int32 `json:"severity"`
	Timestamp int32 `json:"timestamp"`
	Type string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _CallEvent CallEvent

// NewCallEvent instantiates a new CallEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallEvent(description string, severity int32, timestamp int32, type_ string) *CallEvent {
	this := CallEvent{}
	this.Description = description
	this.Severity = severity
	this.Timestamp = timestamp
	this.Type = type_
	return &this
}

// NewCallEventWithDefaults instantiates a new CallEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallEventWithDefaults() *CallEvent {
	this := CallEvent{}
	return &this
}

// GetDescription returns the Description field value
func (o *CallEvent) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *CallEvent) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *CallEvent) SetDescription(v string) {
	o.Description = v
}

// GetSeverity returns the Severity field value
func (o *CallEvent) GetSeverity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value
// and a boolean to check if the value has been set.
func (o *CallEvent) GetSeverityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Severity, true
}

// SetSeverity sets field value
func (o *CallEvent) SetSeverity(v int32) {
	o.Severity = v
}

// GetTimestamp returns the Timestamp field value
func (o *CallEvent) GetTimestamp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *CallEvent) GetTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *CallEvent) SetTimestamp(v int32) {
	o.Timestamp = v
}

// GetType returns the Type field value
func (o *CallEvent) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CallEvent) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CallEvent) SetType(v string) {
	o.Type = v
}

func (o CallEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description
	toSerialize["severity"] = o.Severity
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CallEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"severity",
		"timestamp",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCallEvent := _CallEvent{}

	err = json.Unmarshal(data, &varCallEvent)

	if err != nil {
		return err
	}

	*o = CallEvent(varCallEvent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "severity")
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCallEvent struct {
	value *CallEvent
	isSet bool
}

func (v NullableCallEvent) Get() *CallEvent {
	return v.value
}

func (v *NullableCallEvent) Set(val *CallEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableCallEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableCallEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallEvent(val *CallEvent) *NullableCallEvent {
	return &NullableCallEvent{value: val, isSet: true}
}

func (v NullableCallEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


