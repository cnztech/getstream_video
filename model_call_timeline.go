/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
	"fmt"
)

// checks if the CallTimeline type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallTimeline{}

// CallTimeline struct for CallTimeline
type CallTimeline struct {
	Events []CallEvent `json:"events"`
	AdditionalProperties map[string]interface{}
}

type _CallTimeline CallTimeline

// NewCallTimeline instantiates a new CallTimeline object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallTimeline(events []CallEvent) *CallTimeline {
	this := CallTimeline{}
	this.Events = events
	return &this
}

// NewCallTimelineWithDefaults instantiates a new CallTimeline object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallTimelineWithDefaults() *CallTimeline {
	this := CallTimeline{}
	return &this
}

// GetEvents returns the Events field value
func (o *CallTimeline) GetEvents() []CallEvent {
	if o == nil {
		var ret []CallEvent
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *CallTimeline) GetEventsOk() ([]CallEvent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *CallTimeline) SetEvents(v []CallEvent) {
	o.Events = v
}

func (o CallTimeline) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallTimeline) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["events"] = o.Events

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CallTimeline) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"events",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCallTimeline := _CallTimeline{}

	err = json.Unmarshal(data, &varCallTimeline)

	if err != nil {
		return err
	}

	*o = CallTimeline(varCallTimeline)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "events")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCallTimeline struct {
	value *CallTimeline
	isSet bool
}

func (v NullableCallTimeline) Get() *CallTimeline {
	return v.value
}

func (v *NullableCallTimeline) Set(val *CallTimeline) {
	v.value = val
	v.isSet = true
}

func (v NullableCallTimeline) IsSet() bool {
	return v.isSet
}

func (v *NullableCallTimeline) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallTimeline(val *CallTimeline) *NullableCallTimeline {
	return &NullableCallTimeline{value: val, isSet: true}
}

func (v NullableCallTimeline) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallTimeline) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


