/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
	"fmt"
)

// checks if the AudioSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AudioSettings{}

// AudioSettings struct for AudioSettings
type AudioSettings struct {
	AccessRequestEnabled bool `json:"access_request_enabled"`
	DefaultDevice string `json:"default_device"`
	MicDefaultOn bool `json:"mic_default_on"`
	OpusDtxEnabled bool `json:"opus_dtx_enabled"`
	RedundantCodingEnabled bool `json:"redundant_coding_enabled"`
	SpeakerDefaultOn bool `json:"speaker_default_on"`
	AdditionalProperties map[string]interface{}
}

type _AudioSettings AudioSettings

// NewAudioSettings instantiates a new AudioSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAudioSettings(accessRequestEnabled bool, defaultDevice string, micDefaultOn bool, opusDtxEnabled bool, redundantCodingEnabled bool, speakerDefaultOn bool) *AudioSettings {
	this := AudioSettings{}
	this.AccessRequestEnabled = accessRequestEnabled
	this.DefaultDevice = defaultDevice
	this.MicDefaultOn = micDefaultOn
	this.OpusDtxEnabled = opusDtxEnabled
	this.RedundantCodingEnabled = redundantCodingEnabled
	this.SpeakerDefaultOn = speakerDefaultOn
	return &this
}

// NewAudioSettingsWithDefaults instantiates a new AudioSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAudioSettingsWithDefaults() *AudioSettings {
	this := AudioSettings{}
	return &this
}

// GetAccessRequestEnabled returns the AccessRequestEnabled field value
func (o *AudioSettings) GetAccessRequestEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AccessRequestEnabled
}

// GetAccessRequestEnabledOk returns a tuple with the AccessRequestEnabled field value
// and a boolean to check if the value has been set.
func (o *AudioSettings) GetAccessRequestEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessRequestEnabled, true
}

// SetAccessRequestEnabled sets field value
func (o *AudioSettings) SetAccessRequestEnabled(v bool) {
	o.AccessRequestEnabled = v
}

// GetDefaultDevice returns the DefaultDevice field value
func (o *AudioSettings) GetDefaultDevice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultDevice
}

// GetDefaultDeviceOk returns a tuple with the DefaultDevice field value
// and a boolean to check if the value has been set.
func (o *AudioSettings) GetDefaultDeviceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultDevice, true
}

// SetDefaultDevice sets field value
func (o *AudioSettings) SetDefaultDevice(v string) {
	o.DefaultDevice = v
}

// GetMicDefaultOn returns the MicDefaultOn field value
func (o *AudioSettings) GetMicDefaultOn() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.MicDefaultOn
}

// GetMicDefaultOnOk returns a tuple with the MicDefaultOn field value
// and a boolean to check if the value has been set.
func (o *AudioSettings) GetMicDefaultOnOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MicDefaultOn, true
}

// SetMicDefaultOn sets field value
func (o *AudioSettings) SetMicDefaultOn(v bool) {
	o.MicDefaultOn = v
}

// GetOpusDtxEnabled returns the OpusDtxEnabled field value
func (o *AudioSettings) GetOpusDtxEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.OpusDtxEnabled
}

// GetOpusDtxEnabledOk returns a tuple with the OpusDtxEnabled field value
// and a boolean to check if the value has been set.
func (o *AudioSettings) GetOpusDtxEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OpusDtxEnabled, true
}

// SetOpusDtxEnabled sets field value
func (o *AudioSettings) SetOpusDtxEnabled(v bool) {
	o.OpusDtxEnabled = v
}

// GetRedundantCodingEnabled returns the RedundantCodingEnabled field value
func (o *AudioSettings) GetRedundantCodingEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RedundantCodingEnabled
}

// GetRedundantCodingEnabledOk returns a tuple with the RedundantCodingEnabled field value
// and a boolean to check if the value has been set.
func (o *AudioSettings) GetRedundantCodingEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RedundantCodingEnabled, true
}

// SetRedundantCodingEnabled sets field value
func (o *AudioSettings) SetRedundantCodingEnabled(v bool) {
	o.RedundantCodingEnabled = v
}

// GetSpeakerDefaultOn returns the SpeakerDefaultOn field value
func (o *AudioSettings) GetSpeakerDefaultOn() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SpeakerDefaultOn
}

// GetSpeakerDefaultOnOk returns a tuple with the SpeakerDefaultOn field value
// and a boolean to check if the value has been set.
func (o *AudioSettings) GetSpeakerDefaultOnOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpeakerDefaultOn, true
}

// SetSpeakerDefaultOn sets field value
func (o *AudioSettings) SetSpeakerDefaultOn(v bool) {
	o.SpeakerDefaultOn = v
}

func (o AudioSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AudioSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["access_request_enabled"] = o.AccessRequestEnabled
	toSerialize["default_device"] = o.DefaultDevice
	toSerialize["mic_default_on"] = o.MicDefaultOn
	toSerialize["opus_dtx_enabled"] = o.OpusDtxEnabled
	toSerialize["redundant_coding_enabled"] = o.RedundantCodingEnabled
	toSerialize["speaker_default_on"] = o.SpeakerDefaultOn

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AudioSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"access_request_enabled",
		"default_device",
		"mic_default_on",
		"opus_dtx_enabled",
		"redundant_coding_enabled",
		"speaker_default_on",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAudioSettings := _AudioSettings{}

	err = json.Unmarshal(data, &varAudioSettings)

	if err != nil {
		return err
	}

	*o = AudioSettings(varAudioSettings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "access_request_enabled")
		delete(additionalProperties, "default_device")
		delete(additionalProperties, "mic_default_on")
		delete(additionalProperties, "opus_dtx_enabled")
		delete(additionalProperties, "redundant_coding_enabled")
		delete(additionalProperties, "speaker_default_on")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAudioSettings struct {
	value *AudioSettings
	isSet bool
}

func (v NullableAudioSettings) Get() *AudioSettings {
	return v.value
}

func (v *NullableAudioSettings) Set(val *AudioSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableAudioSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableAudioSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudioSettings(val *AudioSettings) *NullableAudioSettings {
	return &NullableAudioSettings{value: val, isSet: true}
}

func (v NullableAudioSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudioSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


