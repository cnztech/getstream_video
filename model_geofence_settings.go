/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
	"fmt"
)

// checks if the GeofenceSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeofenceSettings{}

// GeofenceSettings struct for GeofenceSettings
type GeofenceSettings struct {
	Names []string `json:"names"`
	AdditionalProperties map[string]interface{}
}

type _GeofenceSettings GeofenceSettings

// NewGeofenceSettings instantiates a new GeofenceSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeofenceSettings(names []string) *GeofenceSettings {
	this := GeofenceSettings{}
	this.Names = names
	return &this
}

// NewGeofenceSettingsWithDefaults instantiates a new GeofenceSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeofenceSettingsWithDefaults() *GeofenceSettings {
	this := GeofenceSettings{}
	return &this
}

// GetNames returns the Names field value
func (o *GeofenceSettings) GetNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Names
}

// GetNamesOk returns a tuple with the Names field value
// and a boolean to check if the value has been set.
func (o *GeofenceSettings) GetNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Names, true
}

// SetNames sets field value
func (o *GeofenceSettings) SetNames(v []string) {
	o.Names = v
}

func (o GeofenceSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeofenceSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["names"] = o.Names

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GeofenceSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"names",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGeofenceSettings := _GeofenceSettings{}

	err = json.Unmarshal(data, &varGeofenceSettings)

	if err != nil {
		return err
	}

	*o = GeofenceSettings(varGeofenceSettings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "names")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGeofenceSettings struct {
	value *GeofenceSettings
	isSet bool
}

func (v NullableGeofenceSettings) Get() *GeofenceSettings {
	return v.value
}

func (v *NullableGeofenceSettings) Set(val *GeofenceSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableGeofenceSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableGeofenceSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeofenceSettings(val *GeofenceSettings) *NullableGeofenceSettings {
	return &NullableGeofenceSettings{value: val, isSet: true}
}

func (v NullableGeofenceSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeofenceSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


