/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
	"fmt"
)

// checks if the SendEventResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendEventResponse{}

// SendEventResponse struct for SendEventResponse
type SendEventResponse struct {
	Duration string `json:"duration"`
	AdditionalProperties map[string]interface{}
}

type _SendEventResponse SendEventResponse

// NewSendEventResponse instantiates a new SendEventResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendEventResponse(duration string) *SendEventResponse {
	this := SendEventResponse{}
	this.Duration = duration
	return &this
}

// NewSendEventResponseWithDefaults instantiates a new SendEventResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendEventResponseWithDefaults() *SendEventResponse {
	this := SendEventResponse{}
	return &this
}

// GetDuration returns the Duration field value
func (o *SendEventResponse) GetDuration() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *SendEventResponse) GetDurationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *SendEventResponse) SetDuration(v string) {
	o.Duration = v
}

func (o SendEventResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendEventResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["duration"] = o.Duration

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SendEventResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"duration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSendEventResponse := _SendEventResponse{}

	err = json.Unmarshal(data, &varSendEventResponse)

	if err != nil {
		return err
	}

	*o = SendEventResponse(varSendEventResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "duration")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSendEventResponse struct {
	value *SendEventResponse
	isSet bool
}

func (v NullableSendEventResponse) Get() *SendEventResponse {
	return v.value
}

func (v *NullableSendEventResponse) Set(val *SendEventResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSendEventResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSendEventResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendEventResponse(val *SendEventResponse) *NullableSendEventResponse {
	return &NullableSendEventResponse{value: val, isSet: true}
}

func (v NullableSendEventResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendEventResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


