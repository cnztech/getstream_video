/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the CallRecording type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallRecording{}

// CallRecording CallRecording represents a recording of a call.
type CallRecording struct {
	EndTime time.Time `json:"end_time"`
	Filename string `json:"filename"`
	StartTime time.Time `json:"start_time"`
	Url string `json:"url"`
	AdditionalProperties map[string]interface{}
}

type _CallRecording CallRecording

// NewCallRecording instantiates a new CallRecording object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallRecording(endTime time.Time, filename string, startTime time.Time, url string) *CallRecording {
	this := CallRecording{}
	this.EndTime = endTime
	this.Filename = filename
	this.StartTime = startTime
	this.Url = url
	return &this
}

// NewCallRecordingWithDefaults instantiates a new CallRecording object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallRecordingWithDefaults() *CallRecording {
	this := CallRecording{}
	return &this
}

// GetEndTime returns the EndTime field value
func (o *CallRecording) GetEndTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value
// and a boolean to check if the value has been set.
func (o *CallRecording) GetEndTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTime, true
}

// SetEndTime sets field value
func (o *CallRecording) SetEndTime(v time.Time) {
	o.EndTime = v
}

// GetFilename returns the Filename field value
func (o *CallRecording) GetFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
func (o *CallRecording) GetFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filename, true
}

// SetFilename sets field value
func (o *CallRecording) SetFilename(v string) {
	o.Filename = v
}

// GetStartTime returns the StartTime field value
func (o *CallRecording) GetStartTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *CallRecording) GetStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *CallRecording) SetStartTime(v time.Time) {
	o.StartTime = v
}

// GetUrl returns the Url field value
func (o *CallRecording) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CallRecording) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CallRecording) SetUrl(v string) {
	o.Url = v
}

func (o CallRecording) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallRecording) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["end_time"] = o.EndTime
	toSerialize["filename"] = o.Filename
	toSerialize["start_time"] = o.StartTime
	toSerialize["url"] = o.Url

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CallRecording) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"end_time",
		"filename",
		"start_time",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCallRecording := _CallRecording{}

	err = json.Unmarshal(data, &varCallRecording)

	if err != nil {
		return err
	}

	*o = CallRecording(varCallRecording)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "end_time")
		delete(additionalProperties, "filename")
		delete(additionalProperties, "start_time")
		delete(additionalProperties, "url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCallRecording struct {
	value *CallRecording
	isSet bool
}

func (v NullableCallRecording) Get() *CallRecording {
	return v.value
}

func (v *NullableCallRecording) Set(val *CallRecording) {
	v.value = val
	v.isSet = true
}

func (v NullableCallRecording) IsSet() bool {
	return v.isSet
}

func (v *NullableCallRecording) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallRecording(val *CallRecording) *NullableCallRecording {
	return &NullableCallRecording{value: val, isSet: true}
}

func (v NullableCallRecording) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallRecording) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


