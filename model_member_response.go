/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the MemberResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberResponse{}

// MemberResponse struct for MemberResponse
type MemberResponse struct {
	// Date/time of creation
	CreatedAt time.Time `json:"created_at"`
	// Custom member response data
	Custom map[string]interface{} `json:"custom"`
	// Date/time of deletion
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	Role *string `json:"role,omitempty"`
	// Date/time of the last update
	UpdatedAt time.Time `json:"updated_at"`
	User UserResponse `json:"user"`
	UserId string `json:"user_id"`
	AdditionalProperties map[string]interface{}
}

type _MemberResponse MemberResponse

// NewMemberResponse instantiates a new MemberResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberResponse(createdAt time.Time, custom map[string]interface{}, updatedAt time.Time, user UserResponse, userId string) *MemberResponse {
	this := MemberResponse{}
	this.CreatedAt = createdAt
	this.Custom = custom
	this.UpdatedAt = updatedAt
	this.User = user
	this.UserId = userId
	return &this
}

// NewMemberResponseWithDefaults instantiates a new MemberResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberResponseWithDefaults() *MemberResponse {
	this := MemberResponse{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *MemberResponse) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *MemberResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *MemberResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCustom returns the Custom field value
func (o *MemberResponse) GetCustom() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Custom
}

// GetCustomOk returns a tuple with the Custom field value
// and a boolean to check if the value has been set.
func (o *MemberResponse) GetCustomOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Custom, true
}

// SetCustom sets field value
func (o *MemberResponse) SetCustom(v map[string]interface{}) {
	o.Custom = v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *MemberResponse) GetDeletedAt() time.Time {
	if o == nil || IsNil(o.DeletedAt) {
		var ret time.Time
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberResponse) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *MemberResponse) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given time.Time and assigns it to the DeletedAt field.
func (o *MemberResponse) SetDeletedAt(v time.Time) {
	o.DeletedAt = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *MemberResponse) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberResponse) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *MemberResponse) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *MemberResponse) SetRole(v string) {
	o.Role = &v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *MemberResponse) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *MemberResponse) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *MemberResponse) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetUser returns the User field value
func (o *MemberResponse) GetUser() UserResponse {
	if o == nil {
		var ret UserResponse
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *MemberResponse) GetUserOk() (*UserResponse, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *MemberResponse) SetUser(v UserResponse) {
	o.User = v
}

// GetUserId returns the UserId field value
func (o *MemberResponse) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *MemberResponse) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *MemberResponse) SetUserId(v string) {
	o.UserId = v
}

func (o MemberResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["custom"] = o.Custom
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["user"] = o.User
	toSerialize["user_id"] = o.UserId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MemberResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created_at",
		"custom",
		"updated_at",
		"user",
		"user_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMemberResponse := _MemberResponse{}

	err = json.Unmarshal(data, &varMemberResponse)

	if err != nil {
		return err
	}

	*o = MemberResponse(varMemberResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "custom")
		delete(additionalProperties, "deleted_at")
		delete(additionalProperties, "role")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "user")
		delete(additionalProperties, "user_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMemberResponse struct {
	value *MemberResponse
	isSet bool
}

func (v NullableMemberResponse) Get() *MemberResponse {
	return v.value
}

func (v *NullableMemberResponse) Set(val *MemberResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberResponse(val *MemberResponse) *NullableMemberResponse {
	return &NullableMemberResponse{value: val, isSet: true}
}

func (v NullableMemberResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


