/*
Stream API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v100.14.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package getstream_video

import (
	"encoding/json"
)

// checks if the VideoSettingsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VideoSettingsRequest{}

// VideoSettingsRequest struct for VideoSettingsRequest
type VideoSettingsRequest struct {
	AccessRequestEnabled *bool `json:"access_request_enabled,omitempty"`
	CameraDefaultOn *bool `json:"camera_default_on,omitempty"`
	CameraFacing *string `json:"camera_facing,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	TargetResolution *TargetResolutionRequest `json:"target_resolution,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VideoSettingsRequest VideoSettingsRequest

// NewVideoSettingsRequest instantiates a new VideoSettingsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVideoSettingsRequest() *VideoSettingsRequest {
	this := VideoSettingsRequest{}
	return &this
}

// NewVideoSettingsRequestWithDefaults instantiates a new VideoSettingsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVideoSettingsRequestWithDefaults() *VideoSettingsRequest {
	this := VideoSettingsRequest{}
	return &this
}

// GetAccessRequestEnabled returns the AccessRequestEnabled field value if set, zero value otherwise.
func (o *VideoSettingsRequest) GetAccessRequestEnabled() bool {
	if o == nil || IsNil(o.AccessRequestEnabled) {
		var ret bool
		return ret
	}
	return *o.AccessRequestEnabled
}

// GetAccessRequestEnabledOk returns a tuple with the AccessRequestEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoSettingsRequest) GetAccessRequestEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AccessRequestEnabled) {
		return nil, false
	}
	return o.AccessRequestEnabled, true
}

// HasAccessRequestEnabled returns a boolean if a field has been set.
func (o *VideoSettingsRequest) HasAccessRequestEnabled() bool {
	if o != nil && !IsNil(o.AccessRequestEnabled) {
		return true
	}

	return false
}

// SetAccessRequestEnabled gets a reference to the given bool and assigns it to the AccessRequestEnabled field.
func (o *VideoSettingsRequest) SetAccessRequestEnabled(v bool) {
	o.AccessRequestEnabled = &v
}

// GetCameraDefaultOn returns the CameraDefaultOn field value if set, zero value otherwise.
func (o *VideoSettingsRequest) GetCameraDefaultOn() bool {
	if o == nil || IsNil(o.CameraDefaultOn) {
		var ret bool
		return ret
	}
	return *o.CameraDefaultOn
}

// GetCameraDefaultOnOk returns a tuple with the CameraDefaultOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoSettingsRequest) GetCameraDefaultOnOk() (*bool, bool) {
	if o == nil || IsNil(o.CameraDefaultOn) {
		return nil, false
	}
	return o.CameraDefaultOn, true
}

// HasCameraDefaultOn returns a boolean if a field has been set.
func (o *VideoSettingsRequest) HasCameraDefaultOn() bool {
	if o != nil && !IsNil(o.CameraDefaultOn) {
		return true
	}

	return false
}

// SetCameraDefaultOn gets a reference to the given bool and assigns it to the CameraDefaultOn field.
func (o *VideoSettingsRequest) SetCameraDefaultOn(v bool) {
	o.CameraDefaultOn = &v
}

// GetCameraFacing returns the CameraFacing field value if set, zero value otherwise.
func (o *VideoSettingsRequest) GetCameraFacing() string {
	if o == nil || IsNil(o.CameraFacing) {
		var ret string
		return ret
	}
	return *o.CameraFacing
}

// GetCameraFacingOk returns a tuple with the CameraFacing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoSettingsRequest) GetCameraFacingOk() (*string, bool) {
	if o == nil || IsNil(o.CameraFacing) {
		return nil, false
	}
	return o.CameraFacing, true
}

// HasCameraFacing returns a boolean if a field has been set.
func (o *VideoSettingsRequest) HasCameraFacing() bool {
	if o != nil && !IsNil(o.CameraFacing) {
		return true
	}

	return false
}

// SetCameraFacing gets a reference to the given string and assigns it to the CameraFacing field.
func (o *VideoSettingsRequest) SetCameraFacing(v string) {
	o.CameraFacing = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *VideoSettingsRequest) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoSettingsRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *VideoSettingsRequest) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *VideoSettingsRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetTargetResolution returns the TargetResolution field value if set, zero value otherwise.
func (o *VideoSettingsRequest) GetTargetResolution() TargetResolutionRequest {
	if o == nil || IsNil(o.TargetResolution) {
		var ret TargetResolutionRequest
		return ret
	}
	return *o.TargetResolution
}

// GetTargetResolutionOk returns a tuple with the TargetResolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoSettingsRequest) GetTargetResolutionOk() (*TargetResolutionRequest, bool) {
	if o == nil || IsNil(o.TargetResolution) {
		return nil, false
	}
	return o.TargetResolution, true
}

// HasTargetResolution returns a boolean if a field has been set.
func (o *VideoSettingsRequest) HasTargetResolution() bool {
	if o != nil && !IsNil(o.TargetResolution) {
		return true
	}

	return false
}

// SetTargetResolution gets a reference to the given TargetResolutionRequest and assigns it to the TargetResolution field.
func (o *VideoSettingsRequest) SetTargetResolution(v TargetResolutionRequest) {
	o.TargetResolution = &v
}

func (o VideoSettingsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VideoSettingsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessRequestEnabled) {
		toSerialize["access_request_enabled"] = o.AccessRequestEnabled
	}
	if !IsNil(o.CameraDefaultOn) {
		toSerialize["camera_default_on"] = o.CameraDefaultOn
	}
	if !IsNil(o.CameraFacing) {
		toSerialize["camera_facing"] = o.CameraFacing
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.TargetResolution) {
		toSerialize["target_resolution"] = o.TargetResolution
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VideoSettingsRequest) UnmarshalJSON(data []byte) (err error) {
	varVideoSettingsRequest := _VideoSettingsRequest{}

	err = json.Unmarshal(data, &varVideoSettingsRequest)

	if err != nil {
		return err
	}

	*o = VideoSettingsRequest(varVideoSettingsRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "access_request_enabled")
		delete(additionalProperties, "camera_default_on")
		delete(additionalProperties, "camera_facing")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "target_resolution")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVideoSettingsRequest struct {
	value *VideoSettingsRequest
	isSet bool
}

func (v NullableVideoSettingsRequest) Get() *VideoSettingsRequest {
	return v.value
}

func (v *NullableVideoSettingsRequest) Set(val *VideoSettingsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableVideoSettingsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableVideoSettingsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVideoSettingsRequest(val *VideoSettingsRequest) *NullableVideoSettingsRequest {
	return &NullableVideoSettingsRequest{value: val, isSet: true}
}

func (v NullableVideoSettingsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVideoSettingsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


